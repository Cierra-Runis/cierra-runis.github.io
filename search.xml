<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SwiftUI 使用报告</title>
      <link href="/posts/4691/"/>
      <url>/posts/4691/</url>
      
        <content type="html"><![CDATA[<h2 id="Swift-语言"><a href="#Swift-语言" class="headerlink" title="Swift 语言"></a>Swift 语言</h2><p><a href="https://developer.apple.com/swift/">Swift</a> 是 <a href="https://www.apple.com/">Apple </a> 开发的一门编程语言——不像 <a href="https://www.huawei.com/">某为</a> 什么 <a href="https://developer.huawei.com/consumer/cn/arkts/">ArkTS 语言</a> 就是给 <a href="https://www.typescriptlang.org/">TypeScript</a> 套皮——用的范围也很小，就它自家的产品开发用。</p><p>Swift 和 <a href="https://kotlinlang.org/">Kotlin</a> 非常相似，创新了一些比较奇妙的语法比如：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">callFunction(parma1, (value) &#123;</span><br><span class="line">  <span class="keyword">final</span> value2 = value * <span class="number">2</span>; <span class="built_in">print</span>(value2)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这种最后一个参数是函数时，可以写作：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">callFunction(parma1) &#123; value <span class="keyword">in</span></span><br><span class="line">  <span class="keyword">let</span> value2 <span class="operator">=</span> value <span class="operator">*</span> <span class="number">2</span></span><br><span class="line">  <span class="built_in">print</span>(value2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你说代码好看了嘛是好看了，但代码格式化时不会自动格式化到这种好看的格式，要写这种格式代码补全又不给我补全成这样，到后面反而是浪费了时间。</p><p>我不是很喜欢 Swift，究其原因如下：</p><ol><li>必须使用 Xcode 才能使用 Swift 语言</li><li>Xcode 不自带代码格式化，需要自己找插件</li><li>格式化风格不统一</li><li>没有热更新（Dart 都可以不依赖 Flutter 进行热更新）</li></ol><p>在寻找 Swift 相关项目时看到了能使 Swift 热更新的 <a href="https://github.com/johnno1962/InjectionIII">InjectIII</a> 项目，为什么 Apple 不加？</p><h2 id="XCode"><a href="#XCode" class="headerlink" title="XCode"></a>XCode</h2><p>我真的很想吐槽：这是人用的 IDE？</p><p>真的很难想象 Xcode 没有 Internationalization，以及它的那些面板排布为什么这么反人类，文件管理视图为什么这么让人憋屈。</p><p>我知道 Xcode 和 Android Studio 一样都有个项目视图，但 Android Studio 还能让人切到文件视图，但 Xcode，我的选项呢？</p><p><code>Preview</code> 功能是需要表扬的，因为 SwiftUI 不支持热更新所以连 <code>Preview</code> 都没有的话就更写不下去了。</p><p>但它这 <code>Preview</code> 是会丢失状态的，所以还是有点不行。</p><h2 id="SwiftUI"><a href="#SwiftUI" class="headerlink" title="SwiftUI"></a>SwiftUI</h2><p>我要骂死你们的 Document 啊，你们是不舍得给例子吗？光有文字描述我怎么知道我怎么使用这个组件、函数、类啊？</p><p><code>List</code> 也是神鬼莫测，文档不说明它会自动给子组件加背景和分割线，我在思考。</p><p>有个 <code>LabeledContent</code> 这么好的组件你怎么忍心让它吃灰呢？我一开始一直都是用 <code>HStack &#123; Label() Space() Text() &#125;</code> 这样实现类似 Flutter 里的 <code>ListTile</code> 组件的。</p><p>它要是像 Flutter 那样有一个 <a href="https://flutter.github.io/samples/web/material_3_demo/#/">组件 Gallery</a> 给你展示出来多好啊，可就是没有。</p><p>要称赞的一点就是它的 <code>Text</code> 组件，能直接写 Markdown 转 URL 链接：</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Text</span>(<span class="string">&quot;[byrdsaron@gmail.com](mailto://byrdsaron@gmail.com)&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>资料好少，我好伤心。</p><p>自己在用 SwiftUI 写一个手写字体创建软件，我要了解 <a href="https://home.unicode.org/">Unicode</a>、字体、字形的相关知识，特别是怎么在 SwiftUI 里实现这件事，因为这需要涉及到一些比较低级的函数和接口。</p><p>但资料少的一批，官方文档简略的一批，鼠鼠我伤心的一批 😢。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>更好的排版</title>
      <link href="/posts/64096/"/>
      <url>/posts/64096/</url>
      
        <content type="html"><![CDATA[<p>自写日记开始，自己就越来越注重文字排版。</p><p>我是希望自己编写出来的东西是被精心设计过的，被别人看到时别人会感到舒适的。</p><p>除了之前所谈的“注意语病”外，现在多加的习性则是：</p><h2 id="使用标准的专有名词"><a href="#使用标准的专有名词" class="headerlink" title="使用标准的专有名词"></a>使用标准的专有名词</h2><p>例如 GitHub，官方使用该词时都是 <strong>G</strong>it<strong>H</strong>ub，从来不会使用什么 github、gitHub。</p><p>Xcode 也是，c 是小写的，而 VSCode，C 是大写的。</p><p>当然，编程里有 camelCase 这样的命名规范，那么这时 GitHub 对应什么？是 github 还是 gitHub 呢？</p><p>看个人喜好啦～</p><h2 id="不再过分使用括号"><a href="#不再过分使用括号" class="headerlink" title="不再过分使用括号"></a>不再过分使用括号</h2><p>括号一层一层嵌套会使得意思极其“扭曲”，理解起来需要绕弯子，同时存在一堆右括号连在一起的情况，这很不美观。特别是如果存在括号内多重括号完后接下句，其所指的前文是很难很快找到的。</p><p>更好的做法当然是尽可能不使用括号，将想要表达的内容尽可能展开（flatten）来，出现跳跃性的句子可以使用破折号。</p><h2 id="中英文混排时添加空格"><a href="#中英文混排时添加空格" class="headerlink" title="中英文混排时添加空格"></a>中英文混排时添加空格</h2><p>在绝大多数情况下，在半角字符和全角字符直接加入空格就能给人一种文章没那么挤的感受。</p><p>比如接下来的这句话：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我喜欢吃apple，不喜欢吃peach和orange。</span><br></pre></td></tr></table></figure><p>加入空格：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我喜欢吃 apple ，不喜欢吃 peach 和 orange 。</span><br></pre></td></tr></table></figure><p>这里在每个单词左右两边都加了空格。</p><p>但这里实际上 apple 和 orange 后面由于接续的是一个全角的标点符号，且这个标点符号视觉上可以看作一个半角符号和一个空格，所以我们可以把后面的空格删去。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我喜欢吃 apple，不喜欢吃 peach 和 orange。</span><br></pre></td></tr></table></figure><p>但像“——”“……”这种会占满整个宽度的标点符号，小学老师并没有说左右加什么空格，但现在看来它们有点挤，我是建议加上空格的，这点可以不用严格遵守。</p><p>除此之外，还有计量单位的事。</p><p>1 kg，1 m，1 s。在数字和单位之间需要空格——这实际上就是英文排版要求——而类似 100%，百（千）分号不需要。</p><p>当然，你说类似 4G（第四代移动通信技术）这样的词，它本身是一个专业名词，所以之间不需要空格，但 4 G 确实可以表示类似“4 克”“4 金币”的意思，所以这就得看上下文了。</p><p>同时说说苹果在这方面的细节，他们会如上细微调整半角和全角字符之间的间隔（kerning），看上去和加了空格差不多，反而因为自己加了空格可能会显得间隔过大。</p><p>但考虑到不是所有的设备都有这样的特性，自己加上空格还是更普适的。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>path_provider</title>
      <link href="/posts/42016/"/>
      <url>/posts/42016/</url>
      
        <content type="html"><![CDATA[<h3 align="center">  <a href="https://pub.dev/packages/path_provider#supported-platforms-and-paths">    <code>path_provider</code>  </a></h3><table><thead><tr><th align="center"><code>$&#123;name&#125; =&gt; app</code></th><th align="center"><code>$&#123;org&#125; =&gt; com.example</code></th><th align="center"><code>$&#123;package&#125; =&gt; $&#123;org&#125;.$&#123;name&#125;</code></th></tr></thead></table><table><thead><tr><th align="center"><code>Directory</code></th><th align="center"><code>Android</code> <code>..$0=&gt;/data/user/0; ..$1=&gt;/storage/emulate/0/Android/data</code></th><th align="center"><code>Windows</code> <code>...=&gt;C:\Users\$&#123;user&#125;</code></th></tr></thead><tbody><tr><td align="center"><code>Temporary</code></td><td align="center">🌞 <code>..$0/$&#123;org&#125;/cache</code></td><td align="center">🌞 <code>...\AppData\Local\Temp</code></td></tr><tr><td align="center"><code>Application Support</code></td><td align="center">🌞 <code>..$0/$&#123;org&#125;/files</code></td><td align="center">🌞 <code>...\AppData\Roaming\$&#123;org&#125;\$&#123;name&#125;</code></td></tr><tr><td align="center"><code>Application Library</code></td><td align="center">🌙</td><td align="center">🌙</td></tr><tr><td align="center"><code>Application Documents</code></td><td align="center">🌞 <code>..$0/$&#123;org&#125;/app_flutter</code></td><td align="center">🌞 <code>...\Documents</code></td></tr><tr><td align="center"><code>Application Cache</code></td><td align="center">🌞 <code>..$0/$&#123;org&#125;/cache</code></td><td align="center">🌞 <code>...\AppData\Local\$&#123;org&#125;\$&#123;name&#125;</code></td></tr><tr><td align="center"><code>External Storage</code></td><td align="center">🌞 <code>..$1/$&#123;org&#125;/files</code></td><td align="center">🌙</td></tr><tr><td align="center"><code>External Cache Directories</code></td><td align="center">🌞 <code>..$1/$&#123;org&#125;/files/cache</code></td><td align="center">🌙</td></tr><tr><td align="center"><code>External Storage Directories</code></td><td align="center">🌞 <code>..$1/$&#123;org&#125;/files/music</code></td><td align="center">🌙</td></tr><tr><td align="center"><code>Downloads</code></td><td align="center">🌙</td><td align="center">🌞 <code>...\Downloads</code></td></tr></tbody></table><table><thead><tr><th align="center"><code>Directory</code></th><th align="center"><code>iOS</code> <code>...=&gt;?/data/Containers/Data/Application/$&#123;hash&#125;</code></th><th align="center"><code>macOS</code> <code>...=&gt;/Users/$&#123;user&#125;/Library/Containers/$&#123;package&#125;/Data</code></th></tr></thead><tbody><tr><td align="center"><code>Temporary</code></td><td align="center">🌞 <code>.../Library/Caches</code></td><td align="center">🌞 <code>.../Library/Caches</code></td></tr><tr><td align="center"><code>Application Support</code></td><td align="center">🌞 <code>.../Library/Application Support</code></td><td align="center">🌞 <code>.../Library/Application Support/$&#123;package&#125;</code></td></tr><tr><td align="center"><code>Application Library</code></td><td align="center">🌞 <code>.../Library</code></td><td align="center">🌞 <code>.../Library</code></td></tr><tr><td align="center"><code>Application Documents</code></td><td align="center">🌞 <code>.../Documents</code></td><td align="center">🌞 <code>.../Documents</code></td></tr><tr><td align="center"><code>Application Cache</code></td><td align="center">🌞 <code>.../Library/Caches</code></td><td align="center">🌞 <code>.../Library/Caches/$&#123;package&#125;</code></td></tr><tr><td align="center"><code>External Storage</code></td><td align="center">🌙</td><td align="center">🌙</td></tr><tr><td align="center"><code>External Cache Directories</code></td><td align="center">🌙</td><td align="center">🌙</td></tr><tr><td align="center"><code>External Storage Directories</code></td><td align="center">🌙</td><td align="center">🌙</td></tr><tr><td align="center"><code>Downloads</code></td><td align="center">🌞 <code>.../Downloads</code></td><td align="center">🌞 <code>.../Downloads</code></td></tr></tbody></table><table><thead><tr><th align="center"><code>Directory</code></th><th align="center"><code>Linux</code></th></tr></thead><tbody><tr><td align="center"><code>Temporary</code></td><td align="center">🌞</td></tr><tr><td align="center"><code>Application Support</code></td><td align="center">🌞</td></tr><tr><td align="center"><code>Application Library</code></td><td align="center">🌙</td></tr><tr><td align="center"><code>Application Documents</code></td><td align="center">🌞</td></tr><tr><td align="center"><code>Application Cache</code></td><td align="center">🌞</td></tr><tr><td align="center"><code>External Storage</code></td><td align="center">🌙</td></tr><tr><td align="center"><code>External Cache Directories</code></td><td align="center">🌙</td></tr><tr><td align="center"><code>External Storage Directories</code></td><td align="center">🌙</td></tr><tr><td align="center"><code>Downloads</code></td><td align="center">🌞</td></tr></tbody></table><p align="center">  <a href="https://github.com/Cierra-Runis">    <code>Sorted by Cierra_Runis</code>  </a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 编程 </tag>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Next.js 和 React 使用报告</title>
      <link href="/posts/23517/"/>
      <url>/posts/23517/</url>
      
        <content type="html"><![CDATA[<p>使用报告系列开新坑了，今天要谈的是 <a href="https://nextjs.org/docs">Next.js</a> 14。为什么是 14 呢，因为我从 14 学的，别叫。</p><p>先做个介绍吧，最新的 Next.js 官网上其称自己为“The React Framework for the Web”，记得之前有多加一个“专为生产环境”的头衔，总之，人家是框架，开发的方方面面都体贴的为你想到了。</p><p>对了，可能还要再介绍 <a href="https://react.dev/learn">React</a>，它自己介绍自己为“JavaScript library”，在我看来，它就是将原先命令式的 JavaScript 操作，改为了更加简约的声明式组件，提升了组件的复用性。</p><p>对，大学课程里教过我们使用 jQuery 来操作 HTML 元素，但这玩意怎么还没死啊？这不累死个人？这不老古董？</p><p>以及，React 操作的是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model/Introduction">DOM</a> 节点，通过 <code>Link</code> 组件，其能在“跳转页面”时不再真正跳转页面，而是根据新获取的信息更新当前页面，直观来说就是浏览器左上角不再出现转圈圈的刷新图标，使单页应用成为可能。</p><p>我是不是还要再解释一下什么是 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/SPA">单页应用</a>（？）。</p><h2 id="一、非常好路由"><a href="#一、非常好路由" class="headerlink" title="一、非常好路由"></a>一、非常好路由</h2><p>Next.js 一大好处就是基于文件系统的路由，它抹去了原 React 提供的注册路由的方案，以及其提供的动态路由。</p><p>具体的不细讲，但我应该说明一点，就是即便 React Native 也有基于文件系统的动态路由，我也不会喜欢 React Native，因为移动端是移动端，网页是网页，如果真喜欢网页这一套，那还不如真就 <code>WebView</code> 跑网页完事。</p><h2 id="二、组件设计"><a href="#二、组件设计" class="headerlink" title="二、组件设计"></a>二、组件设计</h2><p>Next.js 是 React 的框架，所有为 React 开发的 UI 库都能在 Next.js 里使用（不像某个 React Native（指指点点.jpg））。</p><p>之前和谢佬参赛时使用的是 <a href="https://mui.com/">MUI</a> 下的 <a href="https://mui.com/joy-ui/getting-started/">Joy UI</a>，但 React 的生态太广阔了，不局限于 Joy UI，自己转用了 <a href="https://nextui.org/docs/components/avatar">NextUI</a> 和 <a href="https://ant.design/components/overview-cn/">Ant Design</a>，前者和开发 Next.js 的 Vercel 公司没有任何关系，但 UI 看起来很像，后者则是蚂蚁集团开发的。</p><p>使用别人的组件基本上就按它们的文档来就行，它们提供的属性一般就足够了。</p><p>但我们还是有自己写点样式的，这里就不得不提到 <a href="https://tailwindcss.com/docs/installation">TailwindCSS</a> 了。</p><h2 id="三、组件的修改"><a href="#三、组件的修改" class="headerlink" title="三、组件的修改"></a>三、组件的修改</h2><p>内联样式如果使用 <code>style</code> 属性来配置，会变得极为冗长，TailwindCSS 能大大改善这点，并对响应式的支持更好——比如对界面大小的响应、暗黑模式的响应、打印状态的响应。</p><p>更不用说我不喜欢的外置 CSS 文件了。</p><h2 id="四、服务器组件和客户端组件"><a href="#四、服务器组件和客户端组件" class="headerlink" title="四、服务器组件和客户端组件"></a>四、服务器组件和客户端组件</h2><p>这我看过教程，但教程里的方法是 Next.js 14 之前的，我理解还是不太清楚，经常到了报错说要用 <code>&quot;use client&quot;</code> 时才反应过来。</p><p>这个还得再了解了解。</p><h2 id="五、状态管理和-Hook"><a href="#五、状态管理和-Hook" class="headerlink" title="五、状态管理和 Hook"></a>五、状态管理和 Hook</h2><p>React 本身有带 <a href="https://react.dev/learn/passing-data-deeply-with-context">状态管理</a> 和一些简单的 <a href="https://react.dev/reference/react/hooks">Hooks</a>，因为我在学 Flutter 时对 Flutter 本身自带的、也是通过 <code>context</code> 向上查找根组件保存的状态的 <a href="https://api.flutter.dev/flutter/widgets/InheritedWidget-class.html">状态管理</a>，以及 <a href="https://pub.dev/packages/flutter_hooks">flutter_hooks</a> 包里的 Hooks 有一些了解，或者说 Flutter 和 flutter_hooks 本身就从 React 学习了很多，我也就大致对 React 的状态管理和 Hooks 有了一些概念。</p><p>具体深造还是得靠写项目的，原理可以不清楚，但总不可以不会用吗——虽然说面试可能也会问到就是了。</p><p>和 Flutter 有社区的状态管理方案一样，React 也有其它的状态管理方案 —— <a href="https://redux.js.org/">Redux</a>（实际上 Flutter 社区就有 <a href="https://docs.flutter.dev/data-and-backend/state-mgmt/options#redux">同名包</a>），但我不会用。</p><p>而且据谢佬说这东西太复杂了，给我推荐了 <a href="https://github.com/pmndrs/zustand">zustand</a>，到时候都学学看就是了。</p><p>而 Hooks 方面，我不太理解 <code>useEffect</code> 是用来干什么的，感觉 <code>useState</code> 就足够了——我看 <code>useEffect</code> 的一个应用的网络请求，但我明显找到了一个更牛逼的 Hooks —— <a href="https://swr.vercel.app/zh-CN/docs/getting-started">useSWR</a>，其也是由  Next.js 背后的同一团队创建的。</p><p>真的非常有用这玩意，我甚至从它身上看到了 mercurius 的未来（指数据同步）。</p><p>六、总结</p><p>Next.js 和 React 的组合非常适合网页开发，可能之后学习 <a href="https://vuejs.org/">Vue</a> 的时候会再来一个它们间的对比，所以说本报告肯定会有第二期。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 使用报告 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Native 使用报告（二）</title>
      <link href="/posts/56291/"/>
      <url>/posts/56291/</url>
      
        <content type="html"><![CDATA[<p>被恶心到了，我要狠狠的吐槽。</p><p>最近在恶补 React、Next.js、React Native，我先谈谈这个 React Native。</p><h2 id="一、语言不行？"><a href="#一、语言不行？" class="headerlink" title="一、语言不行？"></a>一、语言不行？</h2><p>几个月下来，对 TypeScript 的了解更深了，能基本使用 TypeScript 了，像是它的解构，挺有趣的。自己也用 TypeScript 开发了一个 <a href="https://github.com/Cierra-Runis/based_vscode_extension">VSCode 插件</a>，可以说是这个项目后才对 TypeScript 有了好感。</p><p>有关它的类型，我还是不太能看懂，特别是我想要知道一个类型到底是怎样的时候，也就是翻源码的时候，要在很多联合类型直接跳转，这挺麻烦的。而之前也谈过，Dart 很直观，没有这么绕——但我也确实想要 Dart 加入联合类型就是了。</p><p>对了，补充一点，之前说到 Java 没有空安全检查，这不太对，因为后面较新版本的 Java 有空安全，我也看到有的 Java 使用了 <code>@Nullable</code> 注释。</p><p>我不确定现在公司里都用的什么版本的 Java，不会还是 Java 8 吧？我是建议一直跟最新的，不管是语言还是框架，它们为什么要更新呢？因为它们加入了一些新东西，这些东西肯定是被好好讨论后才加入的，而被 deprecate 的那些东西，终将是会被删掉的，不升级还不行。新版本一般也会修复一些 bug、提升些性能，向后兼容的版本范围也可能变小，总之更新是好事。</p><p>但也要求这个过程是渐进的，不然出 bug 会很难受，比如说 Windows 升级，我甚至不想让它自动更新。</p><h2 id="二、框架不行？"><a href="#二、框架不行？" class="headerlink" title="二、框架不行？"></a>二、框架不行？</h2><h3 id="组件设计"><a href="#组件设计" class="headerlink" title="组件设计"></a>组件设计</h3><p>这个我还是要批评的，基础组件太少，布局写起来很麻烦。</p><p>这时候我就去找组件库，找到个 <a href="https://reactnativepaper.com/">React Native Paper</a> 库，用的是 <a href="https://m3.material.io/">Material Design 3</a> 的设计，但也没有像 Flutter 里 <code>Scaffold</code> 的存在，凑合凑合还算过得去。</p><h3 id="组件修改"><a href="#组件修改" class="headerlink" title="组件修改"></a>组件修改</h3><p>样式确实可以不放在另一个文件夹里，能写内联的，在 React Native 里经常使用 <code>style</code> 属性修改，在谈 Next.js 我还会再说个 TailwindCSS。</p><p>Lint 提示确实还是不太好，有些属性名和原来的 CSS 属性名还有区别，我可不想被累死。</p><h3 id="组件在多平台下的表现"><a href="#组件在多平台下的表现" class="headerlink" title="组件在多平台下的表现"></a>组件在多平台下的表现</h3><p>这个我就不多谈了，React Native 表现挺差的，但我现在只搞 Android 这边的，随他去吧。</p><h3 id="Navigation-导航"><a href="#Navigation-导航" class="headerlink" title="Navigation 导航"></a>Navigation 导航</h3><p>我草死你的妈啊 😅，难用一匹——我现在使用的是 <a href="https://reactnavigation.org/docs/getting-started/">@react-navigation</a> 这个包。</p><p>首先，我还是不喜欢命名路由，对 Flutter 来说一样。第一这意味着路由名称是硬编码的字符串，一旦重构会很麻烦；第二传参变得毫无类型可言，我该怎么判断它有没有我要的参数，我难道要每个需要传参的页面（路由、提示框）里都写 <code>as</code>？而且我如果修改了参数类型，在 <code>navigation.navigate</code> 这边是不会有任何提示的。</p><p>对了，这个 <code>navigate</code> 函数本身的类型好像有问题，不知道为什么它要求的是 <code>never</code>，而我需要传入字符串和给页面的传参，但是它也只是有个 lint 报错在那，用还是能用。</p><p>再就是这个在 Flutter 里称作 <code>AppBar</code> 的东西——谁要你自动给我每个路由里的界面都带上了？但这样我人又懵了，对哦，那我自己要写 <code>AppBar</code> 对吧，嗯，React Native Paper 里有个叫 <code>Appbar</code> 的东西，挺好的……等一下，返回按钮不是自动 implement 的，因为这两个包直接没有关系。也就是说我还要自己写一个 <code>AppBar</code> 组件，自己看看这个组件上级有没有路由，有就像 Flutter 那样自动 implement。</p><p>唯一一点好处就是，这个页面间跳转动画挺好看，因为跳转动画是 Android 自带的，因为跳转是使用了原生的。</p><h2 id="三、Debug-工具不方便"><a href="#三、Debug-工具不方便" class="headerlink" title="三、Debug 工具不方便"></a>三、Debug 工具不方便</h2><p>对，今天开个第三节继续吐槽 React Native。</p><p>我是使用 VSCode 和 React Native Cli 进行开发的，还使用了 Microsoft 开发的一个插件。</p><p>首先恶心人的地方是启动，不能 F5 启动（或者说我不知道怎么配置），要 <code>ctrl + shift + p</code> 在面板里选择。这还行，但接下来我人晕了，VSCode 没有进入调试模式——就是底下状态条没黄，这说明它没有 VSCode debugger，这？（刚找到篇 <a href="https://blog.logrocket.com/debugging-react-native-vs-code/">文章</a> 说有插件能，等我用了之后再补充）</p><p>我出错了不知道具体错误在哪，鼠标不会自动跳到出问题的代码去，</p><p>而且我这玩意不能热重启，我只能重载 VSCode 再启动——而热更新也是，很多时候我都不知道它有没有更新，特别是在出 bug 后，保持黑屏，还得自己重启。</p><h2 id="四、结尾"><a href="#四、结尾" class="headerlink" title="四、结尾"></a>四、结尾</h2><p>总之写起来很累，相比较 Flutter，无论是布局、导航、编程语言、调试工具，React Native 都没有很大的优势——它最大的优势可能就是沾了 React 的光，“熟悉 Web 前端开发的技术人员只需很少的学习就可以进入移动应用开发领域”，但 React 嘛，还是让它好好搞网页开发吧，移动应用真不适合。</p><p>PS：本报告可能会有第三期。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 使用报告 </tag>
            
            <tag> React Native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多设备协同与自定义</title>
      <link href="/posts/27134/"/>
      <url>/posts/27134/</url>
      
        <content type="html"><![CDATA[<p>大家好啊，今天来点大家想看的东西啊。</p><p><img src="/img/%E5%A4%9A%E8%AE%BE%E5%A4%87%E5%8D%8F%E5%90%8C%E4%B8%8E%E8%87%AA%E5%AE%9A%E4%B9%89/otto.gif" alt="otto"></p><p>一人多设备的情况已经很常见了，在此分享一下自己的多设备协同体验。</p><h2 id="设备清单"><a href="#设备清单" class="headerlink" title="设备清单"></a>设备清单</h2><table><thead><tr><th align="center">设备</th><th align="center">型号</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">手机</td><td align="center">iQOO Neo 5</td><td align="center">单 Type-C 口；蓝牙 5.1</td></tr><tr><td align="center">平板</td><td align="center">iPad Pro 2021 11’</td><td align="center">蓝牙 5.0；单 Type-C 口，支持雷雳 &#x2F; USB 4，向下兼容 DP、雷雳 3、USB 4、USB 3.1 gen2</td></tr><tr><td align="center">蓝牙耳机</td><td align="center">AirPods Pro II</td><td align="center">单 Type-C 口；蓝牙 5.3</td></tr><tr><td align="center">Mac</td><td align="center">Mac mini M2</td><td align="center">双 Type-C 口，均支持雷雳 &#x2F; USB 4，向下兼容 DP、雷雳 3、USB 4、USB 3.1 gen2；双 Type-A 口；单 HDMI 2.0 口；略</td></tr><tr><td align="center">显示器</td><td align="center">泰坦军团 P2SA2V 4K 144 Hz</td><td align="center">单 DP 1.4 口；双 HDMI 2.1 口；支持 DSC；单 Type-C 口，支持 DP 输出、PD 65 W 供电；单 Type-B 口；两者其一作为双 Type-A 口上行，均支持 USB 3.0；单音频接口</td></tr><tr><td align="center">笔记本电脑</td><td align="center">拯救者 R7000P 2021</td><td align="center">蓝牙 5.1；单 HDMI 2.1 口；双 Type-C 口，均支持 DP 1.4，其一支持 PD 100 W 供电、USB 3.2；四 Type-A 口，均支持 USB 3.1；单千兆网口；单音频接口</td></tr><tr><td align="center">键盘</td><td align="center">狼蛛客制化旗舰 F99 系列</td><td align="center">单 Type-C 口，回报率 1000 Hz；蓝牙 5.0，回报率 125 Hz；无线 2.4 G，回报率 1000 Hz；电池 8000 mAh</td></tr><tr><td align="center">鼠标</td><td align="center">罗技 G502 HERO</td><td align="center">支持按键宏编程；双模式疾速滚轮</td></tr></tbody></table><h2 id="硬件互连"><a href="#硬件互连" class="headerlink" title="硬件互连"></a>硬件互连</h2><p>将各个设备用物理连接起来着实废了一番心思。</p><p>即便 Type-C 能统一接口，各个接口具体支持什么协议也是模糊不清，要在网上搜每个设备的接口支持什么协议，并且还要有能满足这些协议的线材。有够烦人。</p><p>总之先讲讲我这套怎么搭的。</p><h3 id="共享键鼠"><a href="#共享键鼠" class="headerlink" title="共享键鼠"></a>共享键鼠</h3><p>首先显示器和笔记本电脑用 Type-C 转 DP 的线连接起来，显示器能以 4K 144 Hz 的预期模式显示画面，接着将鼠标有线连接至显示器 Type-A 口，键盘 2.4 G 接收器至显示器 Type-A 口。</p><p>问题出现了，照理说这两外设应该连上笔记本电脑的，DP 协议是能够运送双向 USB 信号的，总之再连了根 Type-C 转 Type-B 的线，显示器设置使 Type-B 作为上行。</p><p>再就是显示器和 Mac 用双 Type-C 的线连接起来，显示器能以 4K 60 Hz 的 <strong>惨淡</strong> 模式显示画面。</p><p>不知道为什么，当显示器从 DP 信号源调转至 Type-C 信号源时，Type-C 会夺走 Type-B 上行身份，也就是这根 Type-C 线同时传输了视频信号和 USB 信号。</p><p>总之这样键盘和鼠标就能自如的在笔记本电脑和 Mac 之间切换了，更何况键盘还有 Android、Windows、macOS、iOS 四种模式，使用 Fn+? 快捷键即可切换，非常方便。</p><h3 id="共享音频"><a href="#共享音频" class="headerlink" title="共享音频"></a>共享音频</h3><p>在这里点名批评 Mac 的狗屎设计，连接显示器后就不能在状态栏调整音量了，想调只能去按显示器，纯傻逼 —— 据说有人为此就要买 Mac 不买 Windows 设备，因为 Windows 音质是有损的才能随意调音量 —— 巨傻逼，那我缺的这个音量调节谁给我补啊。</p><p>总之在试过几款软件后都觉得不尽人意，我就直接禁止 Mac 播放声音了。</p><p>对，解决办法是使用 AirPods Pro 无线连接 Mac，这样调节音量就扫扫耳机柄就行，更好的是，AirPods Pro 支持 Apple 设备音频串流，也就是说 Mac 和 iPad 能同时在一个耳机里播放，就像成了一个设备。</p><p>而笔记本电脑由于能随意调整音量，所以外放 OK，当然连耳机也行。</p><p>再说个有关蓝牙耳机的事，自我开始用 AirPods Pro 我才知道，原来其他设备是能在已有设备与耳机连接时打断连接并连接上的，这应该是蓝牙耳机都有的功能就是了。</p><p>多个题外话，Mac 能投屏至 iPad、能鼠标流转操作 iPad（两者意思不同），这个我真觉得很厉害，<del>不觉得很酷吗？</del></p><h2 id="软件互联"><a href="#软件互联" class="headerlink" title="软件互联"></a>软件互联</h2><h3 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h3><p>非常推荐 <a href="https://github.com/localsend/localsend">LocalSend</a> 喵！其是基于 Flutter 开发的全平台文件传输软件，只要是在一个局域网下的设备就能互传。</p><p>那我为什么不使用 SMB 或 FTP 呢？因为太繁琐了，IP 地址会随着网络环境不同而改变，主机名、用户名、域、密码我还不知道哪个对应哪个，以及各个设备没有一个统一的界面，学习成本高。</p><p>当然，如果非要使用 FTP 的话我有个推荐软件 <a href="https://github.com/zhanghai/MaterialFiles">MaterialFiles</a>，其之前在 <a href="https://note-of-me.top/posts/2308/">云盘同步及 Obsidian 相关</a> 介绍过，能在 Android 设备上启动 FTP 服务器。</p><h3 id="Android-投屏至电脑"><a href="#Android-投屏至电脑" class="headerlink" title="Android 投屏至电脑"></a>Android 投屏至电脑</h3><p>非常推荐 <a href="https://github.com/Genymobile/scrcpy">scrcpy</a> 喵！其是一款特别厉害的投屏软件，支持有线连接（好像也能无线？因为我第一次用这个的时候感觉它和 adb 挺像的）、鼠标控制、高刷……</p><p>具体的不多说了，稍微有点门槛的就是这是个没有 GUI 的软件，当然也可以去找人家包的 GUI。</p><h2 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h2><h3 id="桌面自定义"><a href="#桌面自定义" class="headerlink" title="桌面自定义"></a>桌面自定义</h3><p>Windows 的可玩性比 macOS 高多了，<a href="https://store.steampowered.com/app/431960/Wallpaper_Engine/">Wallpaper Engine</a> 这玩意要是能有 macOS 版那我会笑醒，接下来大多讲的还是 Windows 方面的东西。</p><h4 id="程序坞"><a href="#程序坞" class="headerlink" title="程序坞"></a>程序坞</h4><p>macOS 上有程序坞，Windows 有任务栏，但我可不想把程序全“固定到任务栏”，所幸有款名为 <a href="https://lightframe.vertillusion.xyz/">LightFrame</a> 的软件，其有一个组件是 Minecraft 物品栏程序坞，这可真是绝妙的点子，所以狠狠地用 —— 但它也有不足之处：作者不开源，加上年龄较小（？），代码很可能是一坨；存在置底设置经常失效的问题、存在不适配多显示器的问题（把它拖到外接显示器上，以后只用笔记本就看不到了）、存在不响应 DPI 变化的问题（显示器之间拖动大小不发生改变）。</p><p>最大的问题是，我想在 macOS 上也用它，但是完全不支持。</p><p>个人是想在 Flutter 实现无头应用（没有 GUI 也能后台运行的运用）和多视图（支持 0 个及 1 个以上的窗口）后自己实现一个。</p><h4 id="鼠标宏"><a href="#鼠标宏" class="headerlink" title="鼠标宏"></a>鼠标宏</h4><p>罗技鼠标支持按键宏编程，也就是支持按键映射，而且 Windows 和 macOS 都支持。</p><ul><li>对 Microsoft Edge：左右推中键能 <code>返回标签页</code> 和 <code>重做标签页</code>，也就是浏览器历史跳转；拇指上下键能 <code>重开标签页</code> 和 <code>关闭标签页</code>。</li><li>对 Minecraft：G Shift 键能间隔攻击，对于刷怪塔 AFK 很有帮助</li><li>对 VSCode：G Shift 键映射为 F5，方便调试；拇指上下键能 <code>跳转至上个位置</code> 和 <code>跳转至下个位置</code>，也就是光标位置历史跳转</li></ul><p>玩法特别多，帮助也很大。</p><h4 id="全局工具"><a href="#全局工具" class="headerlink" title="全局工具"></a>全局工具</h4><p>在 Windows 上推荐 <a href="https://github.com/microsoft/PowerToys">PowerToys</a> 的 <a href="https://learn.microsoft.com/zh-cn/windows/powertoys/run">PowerToys Run</a>，macOS 上推荐 <a href="https://www.raycast.com/">Raycast</a>。</p><p>使用什么快捷键来呼出快捷栏呢？在 Windows 上我是 <code>ctrl + win + alt + space</code>，在 macOS 上……</p><p>我哪知道，macOS 的键位好奇怪，我键盘切换到 macOS 模式后把 <code>win</code> 和 <code>alt</code> 互调了，然后我又在 macOS 设置里将 <code>command</code> 和 <code>ctrl</code> 对调了，这样才使得 macOS 的键位和 Windows 一致。</p><p><img src="/img/%E5%A4%9A%E8%AE%BE%E5%A4%87%E5%8D%8F%E5%90%8C%E4%B8%8E%E8%87%AA%E5%AE%9A%E4%B9%89/macOS_shortcut.png" alt="macOS_shortcut"></p><p>在此，macOS 上的要做的更好，扩展多（翻译、词典、ChatGPT 对话等等，不过有些功能要订阅制付费），能给每个功能自定义全局快捷键，界面还挺舒适——相比之下 Windows 一开始的样式丑的我根本不想用——补足了很多 macOS 本应该有的功能。</p><p>如：Windows 上 <code>win + v</code> 的剪切板，QQ 提供的 <code>ctrl + alt + a</code> 截图功能，<code>Windows</code> 上的 <code>Everything</code> 全局搜索功能。</p><p>对了，讲讲 <a href="https://www.voidtools.com/support/everything/">Everything</a>，这是 Windows 上很强力的一款全局搜索软件，能秒搜出结果，还支持正则表达式。</p><p>在它的最新版本 <code>1.5a (1.5.0.1366a)</code> 还支持了暗色模式，纯属鉴作！</p><h4 id="更好的-Windows-11"><a href="#更好的-Windows-11" class="headerlink" title="更好的 Windows 11"></a>更好的 Windows 11</h4><p>更好的 Windows 11 就是 Windows 10，Windows 11 有些地方真的不如 Windows 10，那么 <a href="https://github.com/valinet/ExplorerPatcher">ExplorerPatcher</a> 就是把 Windows 11 改造的更像 Windows 10 的一个工具，部分功能如下：</p><ul><li>自由切换 Win 10 和 Win 11 任务栏，支持设置标签合并、功能显示等。</li><li>恢复 Win 10 右键菜单和文件管理器命令栏。</li><li>切换开始菜单版本、禁用推荐、自动打开所有应用页面。</li><li>自定义应用切换器，可选 Win 11、Win 10、Win NT 等风格。</li></ul><p>😤 微软，你好好看开发者怎么教你做事 😤</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>更多的见 <a href="https://github.com/Cierra-Runis/desktop_modified">此 GitHub 仓库</a>，里面分享了更多自定义工具。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂货</title>
      <link href="/posts/11365/"/>
      <url>/posts/11365/</url>
      
        <content type="html"><![CDATA[<h2 id="一些招聘要求"><a href="#一些招聘要求" class="headerlink" title="一些招聘要求"></a>一些招聘要求</h2><ul><li>HTML5、CSS3、ES6、React、Vue、Node.js、Webpack、Gulp、Git</li><li>Redux、EmberJS</li><li>计算机组成原理、计算机网络、数据结构、算法、设计模式、软件架构、操作系统、编译原理、数据库</li><li>C&#x2F;C++、Java、Kotlin、Objective-C、Swift、PHP、Python、Go、Rust、Dart、JavaScript、TypeScript、SQL</li><li>React Native、Weex 、Hippy、Flutter、Hybrid</li><li>前端性能优化方案，工程化优化方案</li><li>有开源作品，GitHub 上有独立作品</li><li>了解多线程编程</li><li>IOS、Android、Windows Phone 开发经验</li><li>深入理解 Windows 操作系统的内存管理、文件系统、进程、线程</li><li>熟悉 Windows 界面实现机制；QT、DuiLib、CEF</li></ul><h2 id="系列作品"><a href="#系列作品" class="headerlink" title="系列作品"></a>系列作品</h2><table><thead><tr><th align="center">名称</th><th align="center">来源</th><th align="center">介绍</th><th align="center">链接</th></tr></thead><tbody><tr><td align="center">Zeus</td><td align="center">宙斯</td><td align="center">基于 Next.js 开发的个人简历网站</td><td align="center"></td></tr><tr><td align="center">Sol</td><td align="center">太阳</td><td align="center">QT 桌面项目管理软件</td><td align="center"></td></tr><tr><td align="center">Mercurius</td><td align="center">水星</td><td align="center">基于 Flutter 开发的开源、跨平台日记软件</td><td align="center"></td></tr><tr><td align="center">Venus</td><td align="center">金星</td><td align="center">基于 Next.js 开发的宠物生活分享网站</td><td align="center"></td></tr><tr><td align="center">Terra</td><td align="center">地球</td><td align="center">原生 Android 虚拟植树软件</td><td align="center"></td></tr><tr><td align="center">Luna</td><td align="center">月球</td><td align="center">月相变化及事件查询微信小程序</td><td align="center"></td></tr><tr><td align="center">Mars</td><td align="center">火星</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">Iuppiter</td><td align="center">木星</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">Saturnus</td><td align="center">土星</td><td align="center">基于 React Native 开发的 每日一字 软件</td><td align="center"></td></tr><tr><td align="center">Uranus</td><td align="center">天王星</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">Neptunus</td><td align="center">海王星</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">Pluto</td><td align="center">冥王星</td><td align="center">原生 iOS 卡片对战游戏</td><td align="center"></td></tr></tbody></table><h2 id="怎么这么多东西"><a href="#怎么这么多东西" class="headerlink" title="怎么这么多东西"></a>怎么这么多东西</h2><p><img src="/img/%E6%9D%82%E8%B4%A7/1000043765.jpg" alt="meme"></p><table><thead><tr><th align="center">名称</th><th align="center">介绍</th><th align="center">名称</th><th align="center">介绍</th></tr></thead><tbody><tr><td align="center"><a href="https://about.gitlab.com/">GitLab</a></td><td align="center">代码托管平台</td><td align="center"><a href="https://www.jetbrains.com/ides/">JetBrains 全家桶</a></td><td align="center">一堆 IDE</td></tr><tr><td align="center"><a href="https://www.jetbrains.com/ai/">JetBairns AI</a></td><td align="center">AI 代码生成</td><td align="center"><a href="https://code.visualstudio.com/">Visual Studio Code</a></td><td align="center">微软的轻量级代码编辑器</td></tr><tr><td align="center"><a href="https://visualstudio.microsoft.com/">Visual Studio</a></td><td align="center">适用于大型项目的 IDE</td><td align="center"><a href="https://www.jetbrains.com/fleet/">JetBrains Fleet</a></td><td align="center">AI 代码生成</td></tr><tr><td align="center"><a href="https://github.com/features/copilot/">GitHub Copilot</a></td><td align="center">AI 代码生成</td><td align="center"><a href="https://github.com/">GitHub</a></td><td align="center">全球最大代码托管平台</td></tr><tr><td align="center"><a href="https://vuejs.org/">Vue</a></td><td align="center">网页开发框架</td><td align="center"><a href="https://vitejs.dev/">Vite</a></td><td align="center">前者的构建工具</td></tr><tr><td align="center"><a href="https://developer.android.com/studio">Android Studio</a></td><td align="center">安卓开发</td><td align="center"><a href="https://developer.apple.com/xcode/">XCode</a></td><td align="center">Apple 生态下的 IDE</td></tr><tr><td align="center"><a href="https://developer.huawei.com/consumer/cn/deveco-studio/">DevEco Studio</a></td><td align="center">HarmonyOS 应用 IDE</td><td align="center"><a href="https://unity.com/">Unity</a></td><td align="center">游戏引擎</td></tr><tr><td align="center"><a href="https://unity.cn/tuanjie/tuanjieyinqing">团结引擎</a></td><td align="center">Unity 中国版</td><td align="center"><a href="https://www.qt.io/">Qt</a></td><td align="center">C++ 跨平台开发框架</td></tr><tr><td align="center"><a href="https://www.electronjs.org/">Electron</a></td><td align="center">基于网页的跨平台开发框架</td><td align="center"><a href="https://tauri.app/">Tauri</a></td><td align="center">基于网页的跨平台开发框架</td></tr><tr><td align="center"><a href="https://react.dev/">React</a></td><td align="center">网页开发 JavaScript 库</td><td align="center"><a href="https://www.cocos.com/">Cocos</a></td><td align="center">国产游戏引擎</td></tr><tr><td align="center"><a href="https://www.unrealengine.com/">Unreal Engine</a></td><td align="center">游戏引擎</td><td align="center"><a href="https://dotnet.microsoft.com/">.NET</a></td><td align="center">.NET 跨平台开发框架</td></tr><tr><td align="center"><a href="https://www.qiniu.com/">七牛云</a></td><td align="center">云储存、云计算服务</td><td align="center"><a href="https://codeberg.org/">Codeberg</a></td><td align="center">代码托管平台</td></tr><tr><td align="center"><a href="https://stackoverflow.com/">Stack Overflow</a></td><td align="center">开发问答求助网站</td><td align="center"><a href="https://nodejs.org/">Node.js</a></td><td align="center">JavaScript 后端技术</td></tr><tr><td align="center"><a href="https://angular.io/">Angular</a></td><td align="center">与 React、Vue 并列的第三类方案</td><td align="center"><a href="https://bitbucket.org/">Bitbucket</a></td><td align="center">代码托管平台</td></tr><tr><td align="center"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/">微信小程序</a></td><td align="center">微信小程序</td><td align="center"><a href="https://www.chromium.org/">Chromium</a></td><td align="center">开源浏览器内核</td></tr><tr><td align="center"><a href="https://www.mozilla.org/en-US/firefox/developer/">Firefox Developer Edition</a></td><td align="center">火狐浏览器开发者版本</td><td align="center"><a href="https://github.com/NervJS">NervJS</a></td><td align="center">京东的类 React 网页开发框架</td></tr><tr><td align="center"><a href="https://taro-ui.jd.com/">Taro</a></td><td align="center">支持 React&#x2F;Vue&#x2F;Nerv 等用于小程序开发</td><td align="center"><a href="https://reqable.com/">Reqable</a></td><td align="center">类 Postman API 调试应用</td></tr><tr><td align="center"><a href="https://gitee.com/">Gitee</a></td><td align="center">幽默国产类 GitHub 代码托管平台</td><td align="center"><a href="https://flutter.dev/">Flutter</a></td><td align="center">Dart 跨平台应用开发框架</td></tr><tr><td align="center"><a href="https://www.npmjs.com/">npm</a></td><td align="center">Node 包管理器，处理依赖</td><td align="center"><a href="https://firebase.google.com/">Firebase</a></td><td align="center">谷歌一站式后端服务</td></tr><tr><td align="center"><a href="https://gradle.org/">Gradle</a></td><td align="center">构建工具，用于 Java&#x2F;Kotlin&#x2F;Android</td><td align="center"><a href="https://codepen.io/">CODEPEN</a></td><td align="center">网页前端代码设计分享网站</td></tr><tr><td align="center"><a href="https://www.eclipse.org/">eclipse</a></td><td align="center">一款已经不怎么好用的 IDE</td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="算法题"><a href="#算法题" class="headerlink" title="算法题"></a>算法题</h2><p><a href="https://blog.csdn.net/q547550831/article/details/51541527">棋盘覆盖问题</a></p><p><a href="https://blog.csdn.net/SongXJ_01/article/details/112439322">棋盘覆盖问题</a></p><p><a href="https://sighsmile.github.io/2017-08-02-weighing-puzzle">天平称硬币问题的通解</a></p><p><a href="https://zhuanlan.zhihu.com/p/100531135">主定理</a></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><a href="http://telegra.ph/%E9%A9%B3%E4%BA%BA%E6%80%A7%E8%AE%BA%E4%BA%BA%E6%B3%A8%E5%AE%9A%E6%98%AF%E8%87%AA%E7%A7%81%E8%87%AA%E5%88%A9%E7%9A%84%E5%90%97-09-24-2">驳人性论人注定是自私自利的吗</a></p><p><a href="https://www.zhihu.com/question/342054227/answer/945310389">有机无机中“机”的意思</a></p><p><a href="https://www.yhmgo.com/vp/18194-3-0.html">命运石之门 0 在线观看</a></p><p><a href="https://www.jianshu.com/p/c1490cc49670">连连看实现</a></p><p><a href="https://ost.51cto.com/posts/24232">Git 仓库瘦身</a></p><p><a href="https://wangdoc.com/">网道互联网开发文档</a></p><p><a href="https://blog.fallenbreath.me/zh-CN/2019/deeply-dissecting-minecraft_1/">深度剖析 Minecraft</a></p><p><a href="https://juejin.cn/post/7161215037078503454">Dart 异步实现</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Native 使用报告</title>
      <link href="/posts/55296/"/>
      <url>/posts/55296/</url>
      
        <content type="html"><![CDATA[<p>最近邀请我参加一个七牛云的校园编程竞赛，我觉得自己能学到些什么，所以就半同意下来了。</p><p>昨天晚上三个人简要谈了谈之后，说是要决定一下选什么框架好，目前就两个方向——<code>React Native</code> 和 <code>Flutter</code>，前者是我只听说过但没实际了解的东西，后者则是自去年 <code>11</code> 月份就在学的东西。</p><p>于是昨天配置好 <code>RN</code> 的基础环境后，今天就看教程去了，但是嘛，越看就越觉得 <code>RN</code> 不好用，我来具体分析一下。</p><h2 id="一、语言不行"><a href="#一、语言不行" class="headerlink" title="一、语言不行"></a>一、语言不行</h2><p>首先，<code>RN</code> 使用 <code>JS/TS</code> 语言来编写程序，而前者 <code>JS</code> 是我认为最令人难受的语言（<code>PHP</code> 好像也挺垃圾的），它的变量类型可以说是一塌糊涂，动态类型 <code>Python</code> 也有，但 <code>Python</code> 我就用来写点小东西，要我用它开发程序……我也不是没写过，<code>WordCloud</code> 就是用 <code>Python</code> 写的，体验也是非常糟糕。除此之外我还非常讨厌它有 <code>==</code> 和 <code>===</code> 的区别，隐式转换是坏文明。</p><p>后者 <code>TS</code> 我就直白的说，我看不懂！<code>Python</code> 里加入类型检查的方法是在变量后面冒号然后一个类型，而且重要的是，即便没给全部的变量都加上类型，程序仍然能跑起来，相当于只是给个 <code>lint</code> 提示一下，但 <code>TS</code> 要写类型就得全部写完，类型还不直观，之前学 <code>React</code> 的时候想转 <code>TS</code> 都转不了，后面对 <code>React</code> 就没多大兴趣了。</p><p>再来聊聊 <code>Flutter</code> 使用的语言 <code>Dart</code>，这是我用的最喜欢的一门语言。</p><p><img src="/img/React-Native-%E4%BD%BF%E7%94%A8%E6%8A%A5%E5%91%8A/1000031563.jpg" alt="1000031563"></p><p>首先，他非常像 <code>Java</code>，而我曾经写过一段时间的 <code>Java</code> 程序，所以很快就上手了。而且相比 <code>Java</code>，它有空安全检查，也就是一个变量只有在其类型后面接上个问号时才能赋值为 <code>null</code>。相比之下，<code>Java</code> 就没有这样的要求，就容易抛出空指针错误。它的语法比 <code>Java</code> 简约，<code>new</code> 关键字不再是必要的。它还有动态类型，所以动态类型的好处 <code>Dart</code> 也有。</p><p>其次，我非常喜欢它的 <code>extension</code> 方法，可以在已有的一个类（如 <code>DateTime</code>）里，注入自己需要的一些便捷方法，这是非常好的，<code>pub.dev</code> 上还有一个包专门收录了许多的 <code>extension</code>，极大方便了开发。</p><h2 id="二、框架不行"><a href="#二、框架不行" class="headerlink" title="二、框架不行"></a>二、框架不行</h2><h3 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h3><p><code>React</code> 和 <code>React Native</code> 都会搞出一个极大的 <code>node_modules</code> 文件夹，这是非常屎的一个设计，我就不多吐槽了，<code>npm</code>、<code>yarn</code>、<code>pnpm</code> 都是为了解决这个烂玩意的，见 <a href="https://gadzan.com/npm-yarn-pnpm">此博客</a> 。</p><p>而 <code>RN</code> 一个令我难受的点是，其 <code>core</code> 核心组件太少了，像是 <code>Navigation</code> 导航都要引入一个包，听说之前它是在 <code>core</code> 里的，之后被分离出去了……嗯……</p><p>再来聊聊 <code>Flutter</code> 的包管理，它没有什么外置的包管理器，要么一句 <code>flutter pub add &lt;包名&gt;</code> 解决，要么自己在 <code>pubspec.yaml</code> 文件里添加一行 <code>&lt;包名&gt;: &lt;版本号&gt;</code> 就行，甚至版本号都不填，留个冒号在那里，<code>Flutter</code> 自己会获取最新且兼容的包，一手包办的感觉太爽了。</p><p>那 <code>Flutter</code> 的包是放在哪的呢？在 <code>%LOCALAPPDATA%\Pub\Cache\hosted</code> 下，它按源的不同，分多个文件夹，一般来说是 <code>pub.dev</code> 文件夹和 <code>pub.flutter-io.cn</code> 文件夹，进 <code>pub.dev</code> 文件夹能看到很多包的不同版本的文件夹，就统计下来连 <code>2 GB</code> 都没有。</p><p><img src="/img/React-Native-%E4%BD%BF%E7%94%A8%E6%8A%A5%E5%91%8A/155b84db5206f6d574ad00822490f74fabd64164e17e12cfcdb729601a82e342.png" alt="155b84db5206f6d574ad00822490f74fabd64164e17e12cfcdb729601a82e342"></p><p>高下立判。</p><h3 id="组件设计"><a href="#组件设计" class="headerlink" title="组件设计"></a>组件设计</h3><p><code>React</code> 和 <code>RN</code> 的类组件和 <code>Flutter</code> 的组件非常相似，但没有明显区分自己管理状态和无状态的组件，换言之，都是继承自 <code>Component</code>，都有一个 <code>state</code>，只是看你用不用就是了。</p><p>相似的点在于，前者的 <code>constructor</code> 相当于后者的 <code>initState</code>，前者的 <code>render</code> 相当于后者的 <code>build</code>，生命周期非常相似。</p><p><code>Flutter</code> 是分了 <code>StatelessWidget</code> 和 <code>StatefulWidget</code> 的，前者只会要重写一个 <code>build</code> 方法，后者则是可重写整个生命周期。</p><h3 id="组件的修改"><a href="#组件的修改" class="headerlink" title="组件的修改"></a>组件的修改</h3><p>这是我很不喜欢的一点，所有的，对于一个组件的修改，都要在一个远离组件的一个键值对里配置，这非常割裂。</p><p>其实我在学 <code>HTML</code> 和 <code>CSS</code> 的时候就有这样的感觉，样式为什么要放到另一个文件里？紧靠着不是更方便吗？没办法，网页这样搞是历史原因，<code>React</code> 也是搞网页的所以能理解，但 <code>RN</code> 的话……当我知道它不是在各平台的 <code>WebView</code> 里跑 <code>React</code> 时我就不理解了。</p><p>而且写的配置，对 <code>key</code> 是没有 <code>lint</code> 提示的，我鼠标移到上面，它不会提示我这个组件有哪些可以修改的属性，加重了记忆负担。<code>value</code> 更是离谱，绝大多数都是字符串，都是同一个类型，要是打错了怎么办，要是没有代码补全怎么办？</p><p>相比之下，<code>Flutter</code> 的组件的配置要更加舒服，在其构造函数里填入配置的属性即可，而且 <code>lint</code> 会显示构造函数的参数和参数类型，还有 <code>dartDoc</code> 显示示例。除此之外，全局的主题配置也是可以的，像是 <code>MaterialApp</code> 就有 <code>theme</code> 属性，给其子组件树应用上。</p><h3 id="组件在多平台下的表现"><a href="#组件在多平台下的表现" class="headerlink" title="组件在多平台下的表现"></a>组件在多平台下的表现</h3><p><code>RN</code> 说是一套代码跑多个平台，但我觉得它的表现不尽人意，多平台的表现差距太大。就拿圆形加载器组件举例，大小属性值怎么可以只在安卓有效？</p><p>这是受到原生组件的限制导致的，<code>iOS</code> 没有大小属性值……</p><p>而 <code>Flutter</code>，实际上也有多平台适配，部分已多平台适配的组件如 <code>AlertDialog</code> 是有个 <code>adaptive</code> 方法的，而且不会有“受原生组件限制”这一说法。</p><h3 id="Navigation-导航"><a href="#Navigation-导航" class="headerlink" title="Navigation 导航"></a>Navigation 导航</h3><p>我人都麻了，不知道是不是我会错意了，所有进入路由的组件都要受改造，还要在 <code>Navigation</code> 根组件里登记命名路由？</p><p><code>Flutter</code> 哪来那么多事，在 <code>MaterialApp</code> 的 <code>home</code> 属性填初始路由（也就是 <code>&quot;/&quot;</code> 的命名路由），再用 <code>Navigator.push</code> 方法压入未命名的路由，或者和 <code>RN</code> 类似地在 <code>MaterialApp</code> 填命名路由，然后用 <code>Navigator.pushNamed</code> 方法压入命名路由。</p><p>灵活性比 <code>RN</code> 强太多了。</p><h2 id="我了解不够"><a href="#我了解不够" class="headerlink" title="我了解不够"></a>我了解不够</h2><p>这里是我自己的一些问题，以上都是刚接触一天所体验到的，可能了解上面的一些问题也早都有了解决方案。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 使用报告 </tag>
            
            <tag> Flutter </tag>
            
            <tag> React Native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LaTeX 使用报告</title>
      <link href="/posts/1235/"/>
      <url>/posts/1235/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><code>LaTeX</code> 是一个文档准备系统（<code>Document Preparing System</code>），它非常适用于生成高印刷质量的科技类和数学类文档。它也能够生成所有其他种类的文档，小到简单的信件，大到完整的书籍。<code>LaTeX</code> 使用 <code>TeX</code> 作为它的排版引擎。</p><p>总之是以代码的形式生成很漂亮的 <code>pdf</code> 文档！相比 <code>Word</code> 他虽然不够直观，但，漂亮决定一切（（（</p><h2 id="一些不便"><a href="#一些不便" class="headerlink" title="一些不便"></a>一些不便</h2><ol><li><code>Emoji</code> 插入不便</li><li>自定义字体不便</li><li>错误排查不便</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 包与 email 提醒</title>
      <link href="/posts/11399/"/>
      <url>/posts/11399/</url>
      
        <content type="html"><![CDATA[<h2 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h2><p>在使用 <code>python</code> 写监听器的时候经常使用邮件提醒监听器变化，一开始就是简单一句话提醒就行，后面想着这玩意应该能和自己以前收到的邮件一样好看，所以开始试着发送 <code>html</code> 格式而不是纯文本的邮件，经过一番折腾，最后搞出来了个 <code>python</code> 包 <a href="https://github.com/Cierra-Runis/listener_email">listener_email</a> 。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>参考了苹果购物详情邮件：</p><p><img src="/img/Python-%E5%8C%85%E4%B8%8E-email-%E6%8F%90%E9%86%92/image.png" alt="Alt text"></p><p>可是在修改过程中发现各个平台显示出的结果都不一样，其中：</p><ul><li><code>QQ</code> 邮箱网页版支持最好，能不使用 <code>&lt;table&gt;</code> <code>&lt;tbody&gt;</code> <code>&lt;tr&gt;</code> <code>&lt;td&gt;</code> 等标签，而是普通的 <code>&lt;div&gt;</code> 和 <code>css</code> 里的 <code>display: flex</code> 属性进行布局，其他的邮箱都不可以；能使用 <code>github.com</code> 域名下的图片，而不是非要使用 <code>raw.githubusercontent.com</code> 域名下的图片，其他的邮箱都不可以；唯一的缺点是没有暗色模式</li><li><code>iPad</code> 版 <code>Gmail</code> 只能使用 <code>&lt;table&gt;</code> <code>&lt;tr&gt;</code> <code>&lt;td&gt;</code> 等标签进行布局，使用 <code>&lt;tbody&gt;</code> 标签 <code>Gmail</code> 会把里面的东西掏出来，从而破坏布局，且不支持自定义字体</li><li>网页版 <code>Gmail</code> 同上，但背景强制显示为白色，即便开启了暗色模式</li><li><code>iPad</code> 自带 <code>邮件</code> 同上，同时在 <code>系统设置 &gt; 邮件 &gt; 隐私保护</code> 里的 <code>保护“邮件”活动</code> 若未关闭，且下方 <code>阻止所有远程内容</code> 未关闭，则默认不能查看图片</li><li><code>QQ</code> 手机版 <code>QQ 邮箱提醒</code> 里的邮件不支持自定义字体，且若在 <code>QQ 侧拉栏设置 &gt; 通用 &gt; 模式选择</code> 里选择 <code>体验模式</code> ，则背景强制显示为白色，反之选择 <code>普通模式</code> 则背景在夜间模式下能显示为黑色</li><li><code>微信</code> 手机版 <code>QQ 邮箱提醒</code> 里的邮件最差劲，不会自动识别邮箱为链接，不支持自定义字体，链接颜色会被一致改为蓝色，整个页面根本没做暗色模式，连上面 <code>发件人</code> 的样式都丑的一批，鉴定为 <code>“小而美”</code></li></ul><p>排查了好久才总结出以上信息，最后才写出来一个较为满意的 <code>html</code> ，想着这东西可以写成个包方便使用，也就开始了写包历程。</p><h2 id="Python-包"><a href="#Python-包" class="headerlink" title="Python 包"></a>Python 包</h2><p>答案是国内资源太少，姑且把包 <a href="https://github.com/Cierra-Runis/listener_email">listener_email</a> 上传使用了。</p><p>但我想着一般包都是 <code>import listener_email</code> 然后 <code>listener_email.sent_email()</code> 来使用函数，而不是 <code>from listener_email import sent_email, ListenerEmail</code> 然后 <code>sent_email()</code> 来使用函数……</p><p>不懂，暂且懒了——</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> email </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有关符号链接的小问题</title>
      <link href="/posts/53952/"/>
      <url>/posts/53952/</url>
      
        <content type="html"><![CDATA[<h2 id="符号链接与云盘同步"><a href="#符号链接与云盘同步" class="headerlink" title="符号链接与云盘同步"></a>符号链接与云盘同步</h2><p>在之前的 <a href="https://note-of-me.top/posts/2308/">云盘同步及 Obsidian 相关</a> 文章里有提到：</p><blockquote><p>兜兜转转还得是微软的 <code>OneDrive</code> ，在 <code>cmd</code> 使用 <code>mklink /d &quot;D:\OneDrive\Songs&quot; &quot;D:\osu\Songs&quot;</code> 创建链接使 <code>D:\OneDrive</code> 这个我个人设定的 <code>OneDrive</code> 文件夹（默认在哪来着不记得了）里出现一个 <code>Songs</code> 文件夹，进去一看好家伙是 <code>D:\osu\Songs</code> 里的东西，这样 <code>Windows</code> 方面成功。</p></blockquote><p>其中使用的指令创建了一个符号链接，其中真正的文档处在后者 <code>D:\osu\Songs</code> 中，而前者 <code>D:\OneDrive\Songs</code> 是指向后者的一个符号链接，注意前者原先是不能存在 <code>Songs</code> 文件夹的，否则无法创建符号链接。</p><p>这种方案这会引发 <code>OneDrive</code> 无法正确显示是否已同步文件的问题，解决办法是先转移文件到别的地方，右键删除符号链接：</p><blockquote><p>在网上查询了许多方法都不管用，会出现删除后无法创建同名文件夹，文件夹会自动添加 <code>2</code> 后缀的 bug，感觉没死一样阴魂不散。</p><p>解决办法是直接将符号链接改名为一串极度不会重复的名称（比如一串哈希值什么的）后右键删除，这样就能新建同名文件夹</p></blockquote><p>并将文件转移至网盘，再使用 <code>mklink /d &quot;D:\osu\Songs&quot; &quot;D:\OneDrive\Songs&quot;</code> 即可。</p><h2 id="符号链接与-vscode-和-Git"><a href="#符号链接与-vscode-和-Git" class="headerlink" title="符号链接与 vscode 和 Git"></a>符号链接与 vscode 和 Git</h2><p>根据以上步骤网盘存储真实数据，使用处使用符号链接将我项目里的 <code>_post</code> 文件夹改为指向 <code>iCloud</code> 里的 <code>帖子</code> 文件夹后，用 <code>vscode</code> 打开项目文件夹会看到 <code>_post</code> 文件夹后提示这是一个符号链接，和平常一样没有任何问题。</p><p>但问题出现在 <code>git</code> 同步上，<code>git push</code> 后并不会将符号链接所指向的文件夹上传至 <code>github</code>，而是符号链接本身。</p><p>对于我来说这并不影响，因为我使用 <code>.release_tool/main.py</code> 进行构建并发布至两个仓库——一个是源文件仓库，一个是构建后的 <code>github page</code> 仓库——但如此提醒我们不要滥用符号链接。</p><p><strong>因为这玩意又难删资料又这么少玩死了没人管你 😡️</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> vscode </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新主页，新气象</title>
      <link href="/posts/62850/"/>
      <url>/posts/62850/</url>
      
        <content type="html"><![CDATA[<h2 id="旧版的不适应之处"><a href="#旧版的不适应之处" class="headerlink" title="旧版的不适应之处"></a>旧版的不适应之处</h2><p>首先，原先的主题已经很久很久没有实质性更新了，而且自己在自定义方面处处碰壁，于是开始寻找其他博客主题。</p><h2 id="新版的好处"><a href="#新版的好处" class="headerlink" title="新版的好处"></a>新版的好处</h2><p>首先，好看多了，很多地方也能进行自定义。自己还花了一点小钱在 <a href="https://www.aliyun.com/">阿里云</a> 买了个域名，现在这个网站既可以通过 <a href="https://cierra-runis.github.io/">https://cierra-runis.github.io/</a> 访问，也可以通过 <a href="https://note-of-me.top/">https://note-of-me.top</a> 进行访问。</p><p>当然，经过配置之后，现在：</p><ul><li><a href="https://cierra-runis.github.io/">https://cierra-runis.github.io/</a></li><li><a href="https://www.note-of-me.top/">https://www.note-of-me.top/</a></li></ul><p>都是重定向到了 <a href="https://note-of-me.top/">https://note-of-me.top</a> 的，有时前面 <code>www</code> 没被隐去的情况也存在就是了</p><p>除此之外，还使用了 <a href="https://7bu.top/">去不图床</a> 作为网站图片的图床，价格也是特别的亲民，对于大陆用户的速度有一定提升。</p><h2 id="需要解决的问题"><a href="#需要解决的问题" class="headerlink" title="需要解决的问题"></a>需要解决的问题</h2><p>因为自己也有使用 <code>Obsidian</code> 进行博客编辑的习惯，那么在 <code>iPad</code> 上编辑时上传图片就略显复杂，试着寻找插件解决问题罢。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云盘同步及 Obsidian 相关</title>
      <link href="/posts/2308/"/>
      <url>/posts/2308/</url>
      
        <content type="html"><![CDATA[<p>之前在某个直播间看到有人在用一个看起来又是很新的玩意写 <code>markdown</code> 于是非常好奇的下载了 <code>Obsidian</code> ，在看到官方的同步价格贵的一批之后在直播间里进行吐槽获得了能自搭同步的情报，于是进行一个 <code>iCloud</code> 的利用～</p><h2 id="iCloud-与-Obsidian"><a href="#iCloud-与-Obsidian" class="headerlink" title="iCloud 与 Obsidian"></a>iCloud 与 Obsidian</h2><p>具体来说，苹果官方在 <code>Windows</code> 端推出了个 <a href="https://www.microsoft.com/store/productId/9PKTQ5699M62">云盘同步工具</a> ，安装登陆后就能在电脑上看到已和 <code>iPad</code> 文件管理器中同步了的 <code>iCloud 云盘</code> 一项，在 <code>iPad</code> 端的 <code>Obsidian</code> 软件里选择在 <code>iCloud</code> 创建仓库后，便能在 <code>iCloud 云盘</code> 里看到 <code>Obsidian</code> 文件夹，进行软件配置、文件创建、修改、删除都会很快同步，当然 <code>iCloud</code> 有时抽风给你在那把文件“高高挂起”也不是不可能 😡</p><p>个人觉得每月给 <code>iCloud</code> 交的 <code>6</code> 块钱特别的值，便宜好用就是值——于是这同步空间可不能浪费，把自己原先囤积在电脑上的图片、音乐、文件都传了上来，算是减轻了因装了很多开发工具而臃肿不堪的电脑的压力。</p><p>哦，原先想着自己的一些“私密文件”也传上来方便些，但因为 <strong>举头三尺有神明</strong> ，铁拳还是有可能砸到云上贵州的，所以转向了其他云盘。</p><h2 id="Google-Drive"><a href="#Google-Drive" class="headerlink" title="Google Drive"></a>Google Drive</h2><p><code>Google Drive</code> 因为一些懂得都懂的原因，是不能直接访问的，那么这里就可以很好保存“私密文件”。毕竟自己鉴赏这些东西时，也会同时使用技术手段进行一个维基百科的查、用 <code>iPad</code> 里特别好的 <code>GoodNotes</code> 进行一个笔记的做，也就给 <code>GoodNotes</code> 的备份网盘设定成了 <code>Google Drive</code> ～</p><h2 id="OneDrive-与-MaterialFiles-和-FolderSync"><a href="#OneDrive-与-MaterialFiles-和-FolderSync" class="headerlink" title="OneDrive 与 MaterialFiles 和 FolderSync"></a>OneDrive 与 MaterialFiles 和 FolderSync</h2><p>前面主要还是关注 <code>iPad</code> 和 <code>Windows</code> 之间的文件同步，但很明显 <code>Android</code> 阵营也有话说。</p><p>自己有在玩 <code>osu!</code> ，它有官方 <code>stable</code> 版、 <code>lazer</code> 版， <a href="https://space.bilibili.com/305637715">MATRIX-夜翎</a> 从 <code>lazer</code> 版 <code>fork</code> 出来所维护的 <code>mfosu</code> 版，<a href="https://github.com/osudroid/osu-droid">摆烂好久都不更新</a> 再这样下去什么时候我自己 <code>fork</code> 一个来更新的 <code>osu!droid</code> 版，其中我玩的是 <code>Windows</code> 上的 <code>stable</code> 版和 <code>Android</code> 上的 <code>osu!droid</code> 版。它们很好的一点就是文件层次是互通的，简单同步俩者的 <code>Songs</code> 文件夹即可。</p><p>可就是这么简单的方案实现起来也很累人。</p><p>首先需要选择同步云盘，因为 <code>iCloud</code> 没有支持安卓，且 <code>Google Drive</code> 需要那样的技术手段，便考虑别的方法。</p><p>在这里其实有另一套方案，这里我没有继续下去的原因就是有点晕人，再就是速度有点慢，但姑且也作一个记录。在 <code>bilibili</code> 里也能看见有介绍 <code>Syncthing</code> 这款软件的视频，特点是 <code>P2P</code> 安全迅速（存疑），设定双设备相互加对方好友并都设置目标文件夹后，只要连接成功就会开始同步，只可惜我这边连接不稳定——仔细想想这也并不是很符合我的使用场景，这要求俩者都在线且成功连接，所以也就放弃了。</p><p>兜兜转转还得是微软的 <code>OneDrive</code> ，在 <code>cmd</code> 使用 <code>mklink /d &quot;D:\OneDrive\Songs&quot; &quot;D:\osu\Songs&quot;</code> 创建链接使 <code>D:\OneDrive</code> 这个我个人设定的 <code>OneDrive</code> 文件夹（默认在哪来着不记得了）里出现一个 <code>Songs</code> 文件夹，进去一看好家伙是 <code>D:\osu\Songs</code> 里的东西，这样 <code>Windows</code> 方面成功。</p><p>问题出在 <code>Android</code> 方面，这边比 <code>iCloud</code> 不能自选任意文件夹同步更屑，连在文件管理器里都不显示——</p><blockquote><p>这里需点明的是不同安卓手机的文件管理器不一样，但自 <code>Android 13</code> 开始都是用底层的文件管理器才能打开 <code>data</code> 文件夹，在这个底层文件管理器里能看到 <code>OneDrive</code> 网盘，但也没什么用，没法管任意文件夹。</p></blockquote><p>经过一系列的搜索，这里推荐 <code>MaterialFiles</code> 作文件管理器， <code>FolderSync</code> 作文件同步管理器。</p><p><a href="https://github.com/zhanghai/MaterialFiles">前者</a> 是特别简洁的一款使用 <code>Material Design</code> 风格的文件管理器，其几大特点分别是：</p><ul><li>能直接访问 <code>data</code> 文件夹</li><li>能使用 <code>FTP</code> 远程访问</li><li>安装包体积小至 <code>8 MB</code> ，占用不超 <code>20 MB</code></li></ul><p>简而言之非常好用～</p><p><a href="https://play.google.com/store/apps/details?id=dk.tacit.android.foldersync.lite">后者</a> 则是能自选任意文件夹和超多同步云盘服务的文件同步管理器，具体的不介绍了，创建“文件夹对”进行文件同步即可——虽然我文件快两万个同步起来确实有些吃力就是了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>苹果的东西在它自家用起来是很方便的，安卓的好处是自定义程度很高～什么 <code>Windows</code> ？再好不过啦！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> markdown </tag>
            
            <tag> Obsidian </tag>
            
            <tag> iCloud </tag>
            
            <tag> GoogleDrive </tag>
            
            <tag> OneDrive </tag>
            
            <tag> MaterialFiles </tag>
            
            <tag> FolderSync </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有关 Flutter 的若干笔记</title>
      <link href="/posts/495/"/>
      <url>/posts/495/</url>
      
        <content type="html"><![CDATA[<h2 id="Flutter-介绍"><a href="#Flutter-介绍" class="headerlink" title="Flutter 介绍"></a>Flutter 介绍</h2><p><code>Flutter</code> 是 <code>Google</code> 推出并开源的移动应用开发框架，主打跨平台、高保真、高性能。开发者可以通过 <code>Dart</code> 语言开发 <code>App</code>,一套代码同时运行在 <code>iOS</code> 和 <code>Android</code> 平台。<code>Flutter</code> 提供了丰富的组件、接口，开发者可以很快地为 <code>Flutter</code> 添加 <code>Native</code> 扩展。</p><p>在此记录些常用资料：</p><table><thead><tr><th align="center">文档</th><th align="center">文章</th></tr></thead><tbody><tr><td align="center"><a href="https://flutter.dev/">官方网站</a></td><td align="center"><a href="https://ducafecat.com/blog/flutter-best-practices-and-coding-guidelines">Flutter 最佳实践和编码准则</a></td></tr><tr><td align="center"><a href="https://docs.flutter.dev/">官方英文文档</a></td><td align="center"><a href="https://zhuanlan.zhihu.com/p/589939547">iPad 大屏 &amp; Flutter 多引擎适配之路</a></td></tr><tr><td align="center"><a href="https://flutter.cn/docs">官方中文文档</a></td><td align="center"><a href="https://www.python100.com/html/91048.html">详解 android:elevation 的使用</a></td></tr><tr><td align="center"><a href="https://pub.dev/">官方 Package 站</a></td><td align="center"><a href="https://blog.csdn.net/gaoyp/article/details/123126394">Flutter elevation 属性名称的含义</a></td></tr><tr><td align="center"><a href="https://book.flutterchina.club/">Flutter 实战</a></td><td align="center"><a href="https://www.jianshu.com/p/09959db18a4b">Android 中 elevation 的设置方法</a></td></tr><tr><td align="center"></td><td align="center"><a href="https://juejin.cn/post/7304930607133655059">模式匹配</a></td></tr></tbody></table><table><thead><tr><th align="center">工具</th><th align="center">包</th></tr></thead><tbody><tr><td align="center"><a href="https://jsond.bytex.space/">Json to Dart</a></td><td align="center"><a href="https://pub.dev/packages/cached_network_image">图片缓存</a></td></tr><tr><td align="center"></td><td align="center"><a href="https://github.com/Cierra-Runis/based_widget">BasedWidget</a></td></tr><tr><td align="center"></td><td align="center"><a href="https://pub.dev/packages/qweather_icons">QWeatherIcons</a></td></tr></tbody></table><h2 id="使用-index-dart-文件简化导入"><a href="#使用-index-dart-文件简化导入" class="headerlink" title="使用 index.dart 文件简化导入"></a>使用 index.dart 文件简化导入</h2><p>规定文件目录结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">lib</span><br><span class="line">│  index.dart</span><br><span class="line">│  main.dart</span><br><span class="line">│</span><br><span class="line">├─pages</span><br><span class="line">│      home_page.dart</span><br><span class="line">│      index.dart</span><br><span class="line">│      setting_page.dart</span><br><span class="line">│</span><br><span class="line">└─widgets</span><br><span class="line">    │  index.dart</span><br><span class="line">    │</span><br><span class="line">    ├─dialog</span><br><span class="line">    │      dialog_confirm_widget.dart</span><br><span class="line">    │      dialog_from_json_widget.dart</span><br><span class="line">    │      index.dart</span><br><span class="line">    │</span><br><span class="line">    └─diary</span><br><span class="line">       │  index.dart</span><br><span class="line">       │</span><br><span class="line">       ├─list</span><br><span class="line">       │      diary_list_item_place_holder_widget.dart</span><br><span class="line">       │      diary_list_item_widget.dart</span><br><span class="line">       │      diary_list_view_widget.dart</span><br><span class="line">       │      index.dart</span><br><span class="line">       │</span><br><span class="line">       └─page</span><br><span class="line">              diary_page_item_share_button_widget.dart</span><br><span class="line">              diary_page_item_widget.dart</span><br><span class="line">              diary_page_view_widget.dart</span><br><span class="line">              index.dart</span><br></pre></td></tr></table></figure><p>则在 <code>lib/index.dart</code> 内 <code>export</code> 所有子文件夹下的 <code>index.dart</code> 文件：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="string">&#x27;main.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="string">&#x27;pages/index.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="string">&#x27;widgets/index.dart&#x27;</span>;</span><br></pre></td></tr></table></figure><p>在 <code>pages/index.dart</code> 内 <code>export</code> 所有该文件夹下的 <code>*.dart</code> 文件：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="string">&#x27;home_page.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="string">&#x27;setting_page.dart&#x27;</span>;</span><br></pre></td></tr></table></figure><p>在所有 <code>*.dart</code> 文件（包括 <code>main.dart</code> 文件）内尽绝大可能 <code>import &#39;package:&lt;项目名&gt;/index.dart&#39;;</code> 即可简化导入。</p><p>同时当要引入外部包时，只要在 <code>lib/index.dart</code> 文件内导入即可，当然，有时会出现不同包之间的类名冲突，此时在需要使用到该包的地方单独 <code>import</code> 即可，或者使用 <code>hide/show</code> 语法限制，具体例子如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// <span class="language-markdown">各路由下的 index.dart</span></span></span><br><span class="line"><span class="keyword">export</span> <span class="string">&#x27;main.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="string">&#x27;pages/index.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="string">&#x27;widgets/index.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="language-markdown">flutter 相关</span></span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">[RefreshCallback] 和 <span class="code">`export &#x27;package:flutter/material.dart&#x27;`</span> 冲突，两者近似</span></span></span><br><span class="line"><span class="keyword">export</span> <span class="string">&#x27;package:flutter/cupertino.dart&#x27;</span> <span class="keyword">hide</span> RefreshCallback;</span><br><span class="line"><span class="keyword">export</span> <span class="string">&#x27;package:flutter/services.dart&#x27;</span></span><br><span class="line">    <span class="keyword">show</span> DeviceOrientation, SystemChrome; <span class="comment">// 设备服务</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">[Badge] 和 <span class="code">`export &#x27;package:badges/badges.dart&#x27;; // 小红点提示`</span> 冲突，我想用外部包</span></span></span><br><span class="line"><span class="keyword">export</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span> <span class="keyword">hide</span> Badge;</span><br><span class="line"><span class="keyword">export</span> <span class="string">&#x27;package:flutter/gestures.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="language-markdown">dart 相关</span></span></span><br><span class="line"><span class="keyword">export</span> <span class="string">&#x27;dart:async&#x27;</span> <span class="keyword">show</span> Timer, StreamSubscription;</span><br><span class="line"><span class="keyword">export</span> <span class="string">&#x27;dart:convert&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="string">&#x27;dart:io&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="string">&#x27;dart:ui&#x27;</span> <span class="keyword">show</span> ImageFilter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/// <span class="language-markdown">外部包相关</span></span></span><br><span class="line"><span class="keyword">export</span> <span class="string">&#x27;package:badges/badges.dart&#x27;</span>; <span class="comment">// 小红点提示</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">[Interval] 和 <span class="code">`package:flutter/src/animation/curves.dart`</span> 冲突，两者结构完全不同，但外部包里的这个用不到</span></span></span><br><span class="line"><span class="keyword">export</span> <span class="string">&#x27;package:dart_date/dart_date.dart&#x27;</span> <span class="keyword">hide</span> Interval; <span class="comment">// 日期工具</span></span><br><span class="line"><span class="comment">/// <span class="language-markdown">[Text] 和 <span class="code">`export &#x27;package:flutter/material.dart`</span> 冲突，两者结构完全不同，但外部包里的这个用不到</span></span></span><br><span class="line"><span class="keyword">export</span> <span class="string">&#x27;package:flutter_quill/flutter_quill.dart&#x27;</span> <span class="keyword">hide</span> Text; <span class="comment">// 富文本</span></span><br></pre></td></tr></table></figure><h2 id="版本号构建问题"><a href="#版本号构建问题" class="headerlink" title="版本号构建问题"></a>版本号构建问题</h2><p><code>Flutter</code> 使用 <code>android/app/build.gradle</code> 来打包 <code>apk</code>, 且其引入了 <code>flutter.gradle</code> 并指向 <code>flutter.groovy</code> 如 <code>D:\Flutter\packages\flutter_tools\gradle\src\main\groovy\flutter.groovy</code></p><p>约在 <code>flutter.groovy</code> 的 <code>993</code> 行</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (shouldSplitPerAbi()) &#123;</span><br><span class="line">    variant.outputs.each &#123; output -&gt;</span><br><span class="line">        <span class="keyword">def</span> abiVersionCode = ABI_VERSION.get(output.getFilter(OutputFile.ABI))</span><br><span class="line">        <span class="keyword">if</span> (abiVersionCode != <span class="literal">null</span>) &#123;</span><br><span class="line">            output.versionCodeOverride =</span><br><span class="line">                abiVersionCode * <span class="number">1000</span> + variant.versionCode</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们知道 <code>flutter</code> 将判断是否使用了 <code>&#39;split-per-abi&#39;</code> 命令, 是则在 <code>ABI_VERSION</code> 选择一个版本 <code>*1000</code> 再加上构建号</p><p>官方解释见 <a href="https://developer.android.com/studio/build/configure-apk-splits">此链接</a></p><p>我们只需修改 <code>ABI_VERSION map</code> 如下</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map ABI_VERSION = [</span><br><span class="line">    (ARCH_ARM32)        : <span class="number">0</span>,</span><br><span class="line">    (ARCH_ARM64)        : <span class="number">0</span>,</span><br><span class="line">    (ARCH_X86)          : <span class="number">0</span>,</span><br><span class="line">    (ARCH_X86_64)       : <span class="number">0</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong><em>注意若进行了 <code>Flutter</code> 版本更新，应重新修改该 <code>flutter.groovy</code> 文件</em></strong></p><h2 id="vivo-系手机无法调试-Flutter-程序"><a href="#vivo-系手机无法调试-Flutter-程序" class="headerlink" title="vivo 系手机无法调试 Flutter 程序"></a><code>vivo</code> 系手机无法调试 <code>Flutter</code> 程序</h2><p><code>vivo</code> 系列手机升至 <code>Origin3</code> 后发现调试 <code>Flutter</code> 应用卡在启动页，并且没有任何报错，详见 <a href="https://github.com/flutter/flutter/issues/117019">github issue</a>，简化自 <a href="https://blog.csdn.net/qq910689331/article/details/128790897">此链接</a></p><p>答案是 <code>vivo</code> 系统发大病连日志都隐藏，我们需要提供 <code>IMEI 1</code> 码至 <code>vivo</code> 官方进行授权</p><ol><li>拨号盘输入 <code>*#06#</code> 复制 <code>IMEI 1</code> 值</li><li>添加企业 QQ 号 <code>3002261823</code>（或通过 <a href="https://dev.vivo.com.cn/connectus/customerService?from=header">官方网站</a> 联系）</li><li>提交相关问题和信息，要求一键授权自己的手机</li><li>等待授权成功后拨号盘输入 <code>*#*#112#*#*</code>，<code>“右上角按钮”-&gt;“更多”-&gt;“一键授权”</code> 即可</li></ol><h2 id="AlertDialog-content-传入-ListView-时在调试模式下报错"><a href="#AlertDialog-content-传入-ListView-时在调试模式下报错" class="headerlink" title="AlertDialog content 传入 ListView 时在调试模式下报错"></a><code>AlertDialog</code> <code>content</code> 传入 <code>ListView</code> 时在调试模式下报错</h2><p>这是个怪问题，<code>release</code> 版本正常运行，解决方法如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">AlertDialog(</span><br><span class="line">  title: (...),</span><br><span class="line">  content: SizedBox(</span><br><span class="line">    width: <span class="built_in">double</span>.minPositive, <span class="comment">// 可选 double.maxFinite 但建议为 double.minPositive,</span></span><br><span class="line">    child: ListView(</span><br><span class="line">      shrinkWrap: <span class="keyword">true</span>,</span><br><span class="line">      children: (...),</span><br><span class="line">    ),</span><br><span class="line">  ),</span><br><span class="line">  contentPadding: (...),</span><br><span class="line">  actions: (...),</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="ard-语法"><a href="#ard-语法" class="headerlink" title="ard 语法"></a>ard 语法</h2><p>详见 <a href="https://my.oschina.net/lemos/blog/5559979">此页面</a></p><h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><ol><li><p>尽可能使用 <code>&#39;&#39;</code> 而不是 <code>&quot;&quot;</code> 来表示字符串</p></li><li><p>尽量不使用 <code>StatefulWidget / ConsumerStatefulWidget</code> 而是 <code>StatelessWidget / ConsumerWidget</code></p></li><li><p>尽量不要使用 <code>const MyWidget(&#123;Key? key&#125;) : super(key: key);</code> 而是 <code>const MyWidget(&#123;super.key&#125;);</code>，对于其他变量也是如此</p></li><li><p>对 <code>StatelessWidget / ConsumerWidget</code> 组件，其结构如下</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> MyWidget(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> _myFunction() &#123;</span><br><span class="line">        (...)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    Widget build(BuildContext context) &#123;</span><br><span class="line">        <span class="keyword">return</span> Container();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Future&lt;<span class="keyword">void</span>&gt; _myFuture() &#123;</span><br><span class="line">        (...)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span> <span class="keyword">extends</span> <span class="title">ConsumerWidget</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> MyWidget(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> _myFunction() &#123;</span><br><span class="line">        (...)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    Widget build(BuildContext context, WidgetRef ref) &#123;</span><br><span class="line">        <span class="keyword">return</span> Container();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Future&lt;<span class="keyword">void</span>&gt; _myFuture() &#123;</span><br><span class="line">        (...)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对 <code>StatefulWidget / ConsumerStatefulWidget</code> 组件，其结构如下</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> MyWidget(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line">    (...)</span><br><span class="line"></span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    State&lt;MyWidget&gt; createState() =&gt; _MyWidgetState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyWidgetState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">MyWidget</span>&gt; </span>&#123;</span><br><span class="line">    (...)</span><br><span class="line"></span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="keyword">void</span> initState() &#123;</span><br><span class="line">        <span class="keyword">super</span>.initSate();</span><br><span class="line">        (...)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">        (...)</span><br><span class="line">        <span class="keyword">super</span>.dispose();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> _myFunction() &#123;</span><br><span class="line">        (...)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    Widget build(BuildContext context) &#123;</span><br><span class="line">        <span class="keyword">return</span> Container();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Future&lt;<span class="keyword">void</span>&gt; _myFuture() &#123;</span><br><span class="line">        (...)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWidget</span> <span class="keyword">extends</span> <span class="title">ConsumerStatefulWidget</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> MyWidget(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line">    (...)</span><br><span class="line"></span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    ConsumerState&lt;MyWidget&gt; createState() =&gt; _MyWidgetState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_MyWidgetState</span> <span class="keyword">extends</span> <span class="title">ConsumerState</span>&lt;<span class="title">MyWidget</span>&gt; </span>&#123;</span><br><span class="line">    (...)</span><br><span class="line"></span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="keyword">void</span> initState() &#123;</span><br><span class="line">        <span class="keyword">super</span>.initSate();</span><br><span class="line">        (...)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="keyword">void</span> dispose() &#123;</span><br><span class="line">        (...)</span><br><span class="line">        <span class="keyword">super</span>.dispose();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> _myFunction() &#123;</span><br><span class="line">        (...)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    Widget build(BuildContext context) &#123;</span><br><span class="line">        <span class="keyword">return</span> Container();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Future&lt;<span class="keyword">void</span>&gt; _myFuture() &#123;</span><br><span class="line">        (...)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><ul><li><p><code>Flutter</code> 的使用非常简单，上手也快，非常有意思</p></li><li><p>自己用 <code>Flutter</code> 写了很多项目，这里来个 <code>Mercurius</code> 日记软件的 <a href="https://github.com/Cierra-Runis/mercurius">仓库链接</a></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 编程 </tag>
            
            <tag> Flutter </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[@font-face {    font-family: Torus;    font-weight: 100;    src: url(https://cdn.jsdelivr.net/gh/Cierra-Runis/cierra-runis.github.io/source/fonts/Torus-Thin.daca2c7e.otf);}@font-face {    font-family: Torus;    font-weight: 600;    src: url(https://cdn.jsdelivr.net/gh/Cierra-Runis/cierra-runis.github.io/source/fonts/Torus-SemiBold.d263d500.otf);}@font-face {    font-family: Torus;    font-weight: 700;    src: url(https://cdn.jsdelivr.net/gh/Cierra-Runis/cierra-runis.github.io/source/fonts/Torus-SemiBold.d263d500.otf);}@font-face {    font-family: Torus;    font-weight: 400;    src: url(https://cdn.jsdelivr.net/gh/Cierra-Runis/cierra-runis.github.io/source/fonts/Torus-Regular.734ed3ae.otf);}@font-face {    font-family: Torus;    font-weight: 300;    src: url(https://cdn.jsdelivr.net/gh/Cierra-Runis/cierra-runis.github.io/source/fonts/Torus-Light.8d3ecae8.otf);}@font-face {    font-family: Torus;    font-weight: 900;    src: url(https://cdn.jsdelivr.net/gh/Cierra-Runis/cierra-runis.github.io/source/fonts/Torus-Heavy.7dc2d96b.otf);}@font-face {    font-family: Torus;    font-weight: 800;    src: url(https://cdn.jsdelivr.net/gh/Cierra-Runis/cierra-runis.github.io/source/fonts/Torus-Bold.c233ce17.otf);}@font-face {    font-family: cascadia;    font-weight: normal;    src: url(https://cdn.jsdelivr.net/gh/Cierra-Runis/cierra-runis.github.io/source/fonts/CascadiaCode.ttf);}@font-face {    font-family: HarmonyOS_Sans_SC;    src: url(https://cdn.jsdelivr.net/gh/Cierra-Runis/cierra-runis.github.io/source/fonts/HarmonyOS_Sans_SC_Regular.ttf);}@font-face {    font-family: HarmonyOS_Sans_SC;    font-weight: 100;    src: url(https://cdn.jsdelivr.net/gh/Cierra-Runis/cierra-runis.github.io/source/fonts/HarmonyOS_Sans_SC_Thin.ttf);}@font-face {    font-family: HarmonyOS_Sans_SC;    font-weight: 300;    src: url(https://cdn.jsdelivr.net/gh/Cierra-Runis/cierra-runis.github.io/source/fonts/HarmonyOS_Sans_SC_Light.ttf);}@font-face {    font-family: HarmonyOS_Sans_SC;    font-weight: 500;    src: url(https://cdn.jsdelivr.net/gh/Cierra-Runis/cierra-runis.github.io/source/fonts/HarmonyOS_Sans_SC_Medium.ttf);}@font-face {    font-family: HarmonyOS_Sans_SC;    font-weight: 700;    src: url(https://cdn.jsdelivr.net/gh/Cierra-Runis/cierra-runis.github.io/source/fonts/HarmonyOS_Sans_SC_Bold.ttf);}@font-face {    font-family: HarmonyOS_Sans_SC;    font-weight: 900;    src: url(https://cdn.jsdelivr.net/gh/Cierra-Runis/cierra-runis.github.io/source/fonts/HarmonyOS_Sans_SC_Black.ttf);}div#menus {    font-family: "Torus";}h1#site-title {    font-family: Torus;    font-size: 3em !important;}a.article-title,a.blog-slider__title,a.categoryBar-list-link,h1.post-title {    font-family: Torus;}:root {    --global-bg: #000;}b,strong {    font-weight: 900 !important;}#article-container p {    font-size: 16px;}img {    display: block;    margin: 0 auto 20px;    border-radius: 12px;    max-width: 100%;    -webkit-transition: filter 375ms ease-in 0.2s;    -moz-transition: filter 375ms ease-in 0.2s;    -o-transition: filter 375ms ease-in 0.2s;    -ms-transition: filter 375ms ease-in 0.2s;    transition: filter 375ms ease-in 0.2s;}#aside-content .card-info #card-info-btn {    display: block;    margin-top: 14px;    background-color: var(--btn-bg);    color: var(--btn-color);    text-align: center;    border-radius: 12px;    line-height: 2.4;}#aside-content #card-toc .toc-content .toc-link {    display: block;    margin: 4px 0;    padding: 1px 6px;    transition: all 0.2s ease-in-out;    border-radius: 12px;}.postImgHover img,#pagination .prev-post img,#pagination .next-post img,.relatedPosts>.relatedPosts-list>div img {    border-radius: 0px;}.iconfont {    font-family: "iconfont" !important;    font-size: 3em;    /* 可以定义图标大小 */    font-style: normal;    -webkit-font-smoothing: antialiased;    -moz-osx-font-smoothing: grayscale;}/* 时间轴生肖icon */svg.icon {    /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */    width: 1em;    height: 1em;    /* width和height定义图标的默认宽度和高度*/    vertical-align: -0.15em;    fill: currentColor;    overflow: hidden;}.icon-zhongbiao::before {    color: #ff8000;}/* bilibili 番剧插件 */#article-container .bangumi-tab.bangumi-active {    background: var(--anzhiyu-theme);    color: var(--anzhiyu-ahoverbg);    border-radius: 10px;}#article-container img {    display: block;    margin: 0 auto 20px;    border-radius: 12px !important;    max-width: 100%;    -webkit-transition: filter 375ms ease-in 0.2s;    -moz-transition: filter 375ms ease-in 0.2s;    -o-transition: filter 375ms ease-in 0.2s;    -ms-transition: filter 375ms ease-in 0.2s;    transition: filter 375ms ease-in 0.2s;}.bangumi-info-item {    display: inline-block;    width: 13%;    border-right: 1px solid #6e6e6e !important;    text-align: center;    height: 34px;}a.bangumi-tab:hover {    text-decoration: none !important;}.bangumi-button:hover {    background: var(--anzhiyu-theme) !important;    border-radius: 10px !important;    color: var(--anzhiyu-ahoverbg) !important;}a.bangumi-button.bangumi-nextpage:hover {    text-decoration: none !important;}.bangumi-button {    padding: 5px 10px !important;}a.bangumi-tab {    padding: 5px 10px !important;}svg.icon.faa-tada {    font-size: 1.1em;}.bangumi-info-item {    border-right: 1px solid #ff8000;}.bangumi-info-item span {    color: #ad80ff;}.bangumi-info-item em {    color: #ad80ff;}/* 解决 artitalk 的图标问题 */#uploadSource>svg {    width: 1.19em;    height: 1.5em;}/* top-img 黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */#page-header:not(.not-top-img):before {    background-color: transparent !important;}/* 首页文章卡片 */#recent-posts>.recent-post-item {    background: rgba(255, 255, 255, 0.9);    border-radius: 12px;}/* 首页侧栏卡片 */#aside-content .card-widget {    background: rgba(255, 255, 255, 0.9);}/* 文章页面正文背景 */div#post {    background: rgba(255, 255, 255, 0.9);}/* 分页页面 */div#page {    background: rgba(255, 255, 255, 0.9);}/* 归档页面 */div#archive {    background: rgba(255, 255, 255, 0.9);}/* 标签页面 */div#tag {    background: rgba(255, 255, 255, 0.9);}/* 分类页面 */div#category {    background: rgba(255, 255, 255, 0.9);}/* 夜间模式伪类遮罩层透明 */[data-theme="dark"] #recent-posts>.recent-post-item {    background: rgb(34, 34, 34, 0.9);    border-radius: 12px;}[data-theme="dark"] .card-widget {    background: rgb(34, 34, 34, 0.9) !important;}[data-theme="dark"] div#post {    background: rgb(34, 34, 34, 0.9) !important;}[data-theme="dark"] div#tag {    background: rgb(34, 34, 34, 0.9) !important;}[data-theme="dark"] div#archive {    background: rgb(34, 34, 34, 0.9) !important;}[data-theme="dark"] div#page {    background: rgb(34, 34, 34, 0.9) !important;}[data-theme="dark"] div#category {    background: rgb(34, 34, 34, 0.9) !important;}[data-theme="dark"] div#category {    background: transparent !important;}[data-theme="dark"] #web_bg:before,[data-theme="dark"] #footer:before,[data-theme="dark"] #page-header:before {    position: absolute;    width: 100%;    height: 100%;    background-color: transparent !important;    content: "";}/* 页脚透明 */#footer {    background: transparent !important;}/* 头图透明 */#page-header {    background: transparent !important;}#rightside>div>button {    border-radius: 5px;}/* 滚动条 */::-webkit-scrollbar {    width: 4px;    height: 10px;}::-webkit-scrollbar-thumb {    background-color: rgba(88, 88, 88, 0.801);    border-radius: 2px;}::-webkit-scrollbar-corner {    background-color: transparent;}/* 音乐播放器 *//* .aplayer .aplayer-lrc {    display: none !important;  } */.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {    left: -66px !important;    transition: all 0.3s;    /* 默认情况下缩进左侧66px，只留一点箭头部分 */}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {    left: 0 !important;    transition: all 0.3s;    /* 鼠标悬停是左侧缩进归零，完全显示按钮 */}.aplayer.aplayer-fixed {    z-index: 999999 !important;}/* 评论框  */.vwrap {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 30px 0px;}/* 设置评论框 */.vcard {    box-shadow: 2px 2px 5px #bbb;    background: rgba(255, 255, 255, 0.3);    border-radius: 8px;    padding: 30px;    margin: 30px 0px 0px 0px;}a,[type="button"]:not(:disabled),[type="reset"]:not(:disabled),[type="submit"]:not(:disabled),/* md网站下划线 */#article-container a:hover {    text-decoration: none !important;}#article-container #hpp_talk p img {    display: inline;}/* 404页面 */.error404 #error-wrap .error-content .error-img img {    background-color: transparent !important;}#error-wrap {    position: absolute;    top: 40%;    right: 0;    left: 0;    margin: 0 auto;    padding: 0 1rem;    max-width: 1000px;    transform: translate(0, -50%);}#error-wrap .error-content {    display: flex;    flex-direction: row;    justify-content: center;    align-items: center;    margin: 0 1rem;    height: 18rem;    border-radius: 8px;    background: var(--card-bg);    box-shadow: var(--card-box-shadow);    transition: all 0.3s;}#error-wrap .error-content .error-img {    box-flex: 1;    flex: 1;    height: 100%;    border-top-left-radius: 8px;    border-bottom-left-radius: 8px;    background-color: transparent;    background-position: center;    background-size: cover;}#error-wrap .error-content .error-info {    box-flex: 1;    flex: 1;    padding: 0.5rem;    text-align: center;    font-size: 14px;    font-family: cascadia, "PingFang SC", "Microsoft YaHei", "Hiragino Sans GB",        "Microsoft JhengHei", sans-serif;}#error-wrap .error-content .error-info .error_title {    margin-top: -4rem;    font-size: 9em;}#error-wrap .error-content .error-info .error_subtitle {    margin-top: -3.5rem;    word-break: break-word;    font-size: 1.6em;}#error-wrap .error-content .error-info a {    display: inline-block;    margin-top: 0.5rem;    padding: 0.3rem 1.5rem;    background: var(--btn-bg);    color: var(--btn-color);}#body-wrap.error .aside-list {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    bottom: 0px;    position: absolute;    padding: 1rem;    width: 100%;    overflow: scroll;}#body-wrap.error .aside-list .aside-list-group {    display: flex;    flex-direction: row;    flex-wrap: nowrap;    max-width: 1200px;    margin: 0 auto;}#body-wrap.error .aside-list .aside-list-item {    padding: 0.5rem;}#body-wrap.error .aside-list .aside-list-item img {    width: 100%;    object-fit: cover;    border-radius: 12px;}#body-wrap.error .aside-list .aside-list-item .thumbnail {    overflow: hidden;    width: 230px;    height: 143px;    background: var(--anzhiyu-card-bg);    display: flex;}#body-wrap.error .aside-list .aside-list-item .content .title {    -webkit-line-clamp: 2;    overflow: hidden;    display: -webkit-box;    -webkit-box-orient: vertical;    line-height: 1.5;    justify-content: center;    align-items: flex-end;    align-content: center;    padding-top: 0.5rem;    color: white;}#body-wrap.error .aside-list .aside-list-item .content time {    display: none;}/* 代码框主题 */#article-container figure.highlight {    border-radius: 10px;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>Flutter</title>
      <link href="/flutter/index.html"/>
      <url>/flutter/index.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://pub.dev/static/hash-tihrt5d6/img/pub-dev-logo.svg" alt="pub-logo"></p><table><thead><tr><th align="center">Flutter 包名</th><th align="center">Demo 演示</th><th align="center">GitHub 仓库</th><th align="center">Pub 仓库</th></tr></thead><tbody><tr><td align="center">based_avatar</td><td align="center"><a href="https://note-of-me.top/based_widget/">点此跳转</a></td><td align="center"><a href="https://github.com/Cierra-Runis/based_widget/tree/master/packages/based_avatar">点此跳转</a></td><td align="center"><a href="https://pub.dev/packages/based_avatar">点此跳转</a></td></tr><tr><td align="center">based_battery_indicator</td><td align="center"><a href="https://note-of-me.top/based_widget/">点此跳转</a></td><td align="center"><a href="https://github.com/Cierra-Runis/based_widget/tree/master/packages/based_battery_indicator">点此跳转</a></td><td align="center"><a href="https://pub.dev/packages/based_battery_indicator">点此跳转</a></td></tr><tr><td align="center">based_dock_scaffold</td><td align="center"><a href="https://note-of-me.top/based_widget/">点此跳转</a></td><td align="center"><a href="https://github.com/Cierra-Runis/based_widget/tree/master/packages/based_dock_scaffold">点此跳转</a></td><td align="center"><a href="https://pub.dev/packages/based_dock_scaffold">点此跳转</a></td></tr><tr><td align="center">based_list</td><td align="center"><a href="https://note-of-me.top/based_widget/">点此跳转</a></td><td align="center"><a href="https://github.com/Cierra-Runis/based_widget/tree/master/packages/based_widget">点此跳转</a></td><td align="center"><a href="https://pub.dev/packages/based_list">点此跳转</a></td></tr><tr><td align="center">based_qr</td><td align="center"><a href="https://note-of-me.top/based_widget/">点此跳转</a></td><td align="center"><a href="https://github.com/Cierra-Runis/based_widget/tree/master/packages/based_qr">点此跳转</a></td><td align="center"><a href="https://pub.dev/packages/based_qr">点此跳转</a></td></tr><tr><td align="center">based_splash_page</td><td align="center"><a href="https://note-of-me.top/based_widget/">点此跳转</a></td><td align="center"><a href="https://github.com/Cierra-Runis/based_widget/tree/master/packages/based_splash_page">点此跳转</a></td><td align="center"><a href="https://pub.dev/packages/based_splash_page">点此跳转</a></td></tr><tr><td align="center">based_split_view</td><td align="center"><a href="https://note-of-me.top/based_widget/">点此跳转</a></td><td align="center"><a href="https://github.com/Cierra-Runis/based_widget/tree/master/packages/based_split_view">点此跳转</a></td><td align="center"><a href="https://pub.dev/packages/based_split_view">点此跳转</a></td></tr><tr><td align="center">qweather_icons</td><td align="center"><a href="https://note-of-me.top/qweather_icons/">点此跳转</a></td><td align="center"><a href="https://github.com/Cierra-Runis/qweather_icons">点此跳转</a></td><td align="center"><a href="https://pub.dev/packages/qweather_icons">点此跳转</a></td></tr></tbody></table>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>zeus</title>
      <link href="/zeus/index.html"/>
      <url>/zeus/index.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://zeus-pi.vercel.app/">请点击继续</a></p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center">头像</th><th align="center">链接</th></tr></thead><tbody><tr><td align="center"><img src="https://kagurazakaasahi.github.io/images/avatar.jpg" width="64px" height="64px" alt="ka"/></td><td align="center"><a href="https://kagurazakaasahi.github.io/">咖酱の博客</a></td></tr></tbody></table>]]></content>
      
    </entry>
    
    
  
</search>
